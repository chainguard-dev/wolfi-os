package:
  name: kubeflow-pipelines
  version: 2.1.3
  epoch: 7
  description: Machine Learning Pipelines for Kubeflow
  checks:
    disabled:
      - empty
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - wolfi-base
      - busybox
      - ca-certificates-bundle
      - build-base
      - go
      - go-licenses
      - git
      - argo-cd
      - python3-dev
      - py3-setuptools
      - py3-gpep517
      - py3-wheel
      - py3-pip
      - kubectl
      - nodejs
      - jq
      - eslint

data:
  - name: backends-go-builds
    items:
      apiserver: apiserver;apiserver
      persistence_agent: persistence_agent;agent/persistence
      cache_server: cache_server;cache
      scheduledworkflow: swf;crd/controller/scheduledworkflow
      viewer-crd-controller: viewer;crd/controller/viewer

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/kubeflow/pipelines
      tag: sdk-${{package.version}}
      expected-commit: 2b05ec867fad84e24fe73ef7515e3b5849297e79

  - uses: patch
    with:
      patches: remove-twitter-artifactory.patch

  - uses: patch
    with:
      patches: bump_requirements.patch

  - uses: patch
    with:
      patches: add-samples.patch

subpackages:
  - range: backends-go-builds
    name: "kubeflow-pipelines-${{range.key}}"
    description: "Kubeflow Pipelines ${{range.key}}"
    pipeline:
      - runs: |
          cd backend
          # Remediate GHSA-p782-xgp4-8hr8
          go get golang.org/x/sys@v0.0.0-20220811171246-fbc7d0a398ab

          # Mitigate GHSA-69ch-w2m2-3vjp
          go get golang.org/x/text@v0.9.0
          # GHSA-vvpx-j8f3-3w6h
          go get golang.org/x/net@v0.7.0

          go get golang.org/x/mod@v0.12.0

          # Mitigate GHSA-gwc9-m7rh-j2ww
          # Mitigate GHSA-8c26-wmh5-6g9v
          go get golang.org/x/crypto@1baeb1ce4c0b

          # GHSA-p782-xgp4-8hr8
          go get golang.org/x/sys@v0.8.0
          go mod tidy

          mkdir -p ${{targets.contextdir}}/usr/bin
          mkdir -p ${{targets.contextdir}}/third_party

          name=$(echo "${{range.value}}" | cut -d ';' -f 1)
          path=$(echo "${{range.value}}" | cut -d ';' -f 2-)

          make build/$name
          install -Dm755 ./build/$name ${{targets.contextdir}}/usr/bin/${{range.key}}

          go-licenses check ./src/$path
          go-licenses csv ./src/$path > ${{targets.contextdir}}/third_party/$name.csv
          go-licenses save ./src/$path --save_path ${{targets.contextdir}}/third_party/NOTICES

          if [ "${name}" == "apiserver" ]; then
            mkdir -p ${{targets.contextdir}}/samples
            pip3 install --prefer-binary -r requirements.txt --prefix=/usr --root=${{targets.contextdir}}
            cp -r ../samples/* ${{targets.contextdir}}/samples
            cp ./src/$path/config/sample_config.json ${{targets.contextdir}}/samples/sample_config.json
            mkdir -p ${{targets.contextdir}}/config
            cp -r ./src/$path/config/* ${{targets.contextdir}}/config/
            export COMMIT_SHA=$(git rev-parse --short HEAD)
            sed -E "s#/(blob|tree)/master/#/\1/${COMMIT_SHA}/#g" -i ${{targets.contextdir}}/config/sample_config.json
            sed -E "s/%252Fmaster/%252F${COMMIT_SHA}/#g" -i ${{targets.contextdir}}/config/sample_config.json
          fi
      - uses: strip

  - name: "kubeflow-pipelines-cache-deployer"
    description: "Kubeflow Pipelines cache-deployer"
    dependencies:
      runtime:
        - busybox
        - bash
        - kubectl-latest
        - openssl
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/bin
          mkdir -p ${{targets.contextdir}}/etc/cache-deployer
          mkdir -p ${{targets.contextdir}}/third_party

          install -m755 -D third_party/license.txt ${{targets.contextdir}}/third_party/license.txt

          install -m755 -D backend/src/cache/deployer/cache-webhook-config.v1.yaml.template ${{targets.contextdir}}/etc/cache-deployer/cache-webhook-config.v1.yaml.template
          install -m755 -D backend/src/cache/deployer/cache-webhook-config.v1beta1.v1.15.yaml.template ${{targets.contextdir}}/etc/cache-deployer/cache-webhook-config.v1beta1.v1.15.yaml.template
          install -m755 -D backend/src/cache/deployer/cache-webhook-config.v1beta1.yaml.template ${{targets.contextdir}}/etc/cache-deployer/cache-webhook-config.v1beta1.yaml.template

          install -m755 -D backend/src/cache/deployer/deploy-cache-service.sh ${{targets.contextdir}}/usr/bin/deploy-cache-service.sh
          install -m755 -D backend/src/cache/deployer/webhook-create-signed-cert.sh ${{targets.contextdir}}/usr/bin/webhook-create-signed-cert.sh
          install -m755 -D backend/src/cache/deployer/webhook-patch-ca-bundle.sh ${{targets.contextdir}}/usr/bin/webhook-patch-ca-bundle.sh

  - name: "kubeflow-pipelines-cache-deployer-compat"
    dependencies:
      runtime:
        - kubeflow-pipelines-cache-deployer
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/kfp/cache/deployer/
          ln -s /usr/bin/deploy-cache-service.sh "${{targets.contextdir}}"/kfp/cache/deployer/deploy-cache-service.sh
          ln -s /usr/bin/webhook-create-signed-cert.sh "${{targets.contextdir}}"/kfp/cache/deployer/webhook-create-signed-cert.sh
          ln -s /usr/bin/webhook-patch-ca-bundle.sh "${{targets.contextdir}}"/kfp/cache/deployer/webhook-patch-ca-bundle.sh
          ln -s /etc/cache-deployer/cache-webhook-config.v1.yaml.template "${{targets.contextdir}}"/kfp/cache/deployer/cache-webhook-config.v1.yaml.template
          ln -s /etc/cache-deployer/cache-webhook-config.v1beta1.v1.15.yaml.template "${{targets.contextdir}}"/kfp/cache/deployer/cache-webhook-config.v1beta1.v1.15.yaml.template
          ln -s /etc/cache-deployer/cache-webhook-config.v1beta1.yaml.template "${{targets.contextdir}}"/kfp/cache/deployer/cache-webhook-config.v1beta1.yaml.template

  - name: "kubeflow-pipelines-frontend"
    description: "Kubeflow Pipelines frontend"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/bin
          cd frontend/
          npm ci
          npm run postinstall
          npm run build
          cp -r ./server/* ${{targets.contextdir}}/usr/bin/
          cp -r ./build/* ${{targets.contextdir}}/usr/bin/

  - name: "kubeflow-pipelines-frontend-compat"
    description: "Kubeflow Pipelines frontend compatibility package"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/server
          mkdir -p ${{targets.contextdir}}/client
          ln -sf /usr/bin ${{targets.contextdir}}/server
          ln -sf /usr/bin ${{targets.contextdir}}/client

  - name: "kubeflow-pipelines-metadata-writer"
    description: "Kubeflow Pipelines metadata_writer"
    dependencies:
      runtime:
        - python3
        - py3-absl-py
        - py3-attrs
        - py3-cachetools
        - py3-certifi
        - py3-charset-normalizer
        - py3-google-auth
        - py3-grpcio
        - py3-idna
        - py3-kubernetes
        - py3-lru-dict
        - py3-ml-metadata
        - py3-oauthlib
        - py3-protobuf
        - py3-asn1-modules
        - py3-asn1
        - py3-dateutil
        - py3-yaml
        - py3-requests-oauthlib
        - py3-requests
        - py3-rsa
        - py3-six
        - py3-urllib3
        - py3-websocket-client
    pipeline:
      - runs: |
          cd backend/metadata_writer
          python3 -m gpep517 build-wheel \
            --wheel-dir dist \
            --output-fd 3 3>&1 >&2
          python3 -m installer -d "${{targets.contextdir}}" \
            dist/*.whl
          find ${{targets.contextdir}} -name "*.pyc" -exec rm -rf '{}' +

  - name: "kubeflow-pipelines-metadata-writer-compat"
    description: "Kubeflow Pipelines Metadata Writer"
    dependencies:
      runtime:
        - kubeflow-pipelines-metadata-writer
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/kfp/metadata_writer
          ln -s /usr/lib/python3.11/site-packages/metadata_writer.py "${{targets.contextdir}}"/kfp/metadata_writer/

update:
  enabled: true
  github:
    identifier: kubeflow/pipelines
    strip-prefix: "sdk-"
