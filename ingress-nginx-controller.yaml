#nolint:valid-pipeline-fetch-digest
package:
  name: ingress-nginx-controller
  version: 1.8.2
  epoch: 2
  description: "Ingress-NGINX Controller for Kubernetes"
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - ca-certificates-bundle
      - ca-certificates
      - curl
      - openssh-client
      - openssl
      - openssl-dev
      - libcrypt1
      - opentracing-cpp
      - jaeger-cpp
      - msgpack
      - datadog-cpp
      - yaml-cpp
      - zipkin-cpp
      - ssdeep
      - luajit
      - lua-cjson
      - lua-resty-balancer
      - lua-resty-cache
      - lua-resty-cookie
      - lua-resty-core
      - lua-resty-dns
      - lua-resty-global-throttle
      - lua-resty-http
      - lua-resty-ipmatcher
      - lua-resty-lock
      - lua-resty-memcached
      - lua-resty-redis
      - lua-resty-string
      - lua-resty-upload
      - brotli
      - gd
      - geoip
      - libmaxminddb
      - libxml2
      - libxslt
      - modsecurity
      - mimalloc
      - pcre

environment:
  contents:
    packages:
      - wolfi-base
      - busybox
      - go
      - bash
      - curl
      - curl-dev
      - git
      - openssh-client
      - libcap-utils
      - libcap
      - scanelf
      - ca-certificates-bundle
      - brotli-dev
      - gd-dev
      - geoip-dev
      - libmaxminddb-dev
      - libxml2-dev
      - libxslt-dev
      - pkgconf
      - zeromq-dev
      - gcc
      - clang-15
      - make
      - automake
      - openssl-dev
      - pcre-dev
      - zlib-dev
      - linux-headers
      - perl-dev
      - libedit-dev
      - mercurial
      - findutils
      - ca-certificates
      - patch
      - libaio-dev
      - openssl
      - cmake
      - util-linux
      - lmdb-tools
      - wget
      - libprotobuf
      - flex
      - bison
      - doxygen
      - yajl-dev
      - lmdb-dev
      - libtool
      - autoconf
      - libxml2
      - python3
      - libsrt
      - opentracing-cpp
      - jaeger-cpp
      - msgpack
      - datadog-cpp
      - yaml-cpp
      - zipkin-cpp
      - ssdeep
      - luajit
      - luajit-dev
      - lua-cjson
      - lua-resty-balancer
      - lua-resty-cache
      - lua-resty-cookie
      - lua-resty-core
      - lua-resty-dns
      - lua-resty-global-throttle
      - lua-resty-http
      - lua-resty-ipmatcher
      - lua-resty-lock
      - lua-resty-memcached
      - lua-resty-redis
      - lua-resty-string
      - lua-resty-upload
      - modsecurity
      - mimalloc

vars:
  NGINX_VERSION: "1.25.2"
  NDK_VERSION: "0.3.2"
  SETMISC_VERSION: "0.33"
  MORE_HEADERS_VERSION: "0.34"
  NGINX_DIGEST_AUTH: "1.0.0"
  NGINX_SUBSTITUTIONS: "e12e965ac1837ca709709f9a26f572a54d83430e"
  NGINX_OPENTRACING_VERSION: "0.32.0"
  MODSECURITY_NGINX_VERSION: "1.0.3"
  OWASP_MODSECURITY_CRS_VERSION: "v3.3.5"
  LUA_NGX_VERSION: "0.10.25"
  LUA_STREAM_NGX_VERSION: "0.0.13"
  LUA_UPSTREAM_VERSION: "dba0beaaeb0eaed758af3f4dc0c0464adeaedb1c"
  GEOIP2_VERSION: "a607a41a8115fecfc05b5c283c81532a3d605425"
  NGX_BROTLI_SHA: 63ca02abdcf79c9e788d2eedcc388d2335902e52

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/kubernetes/ingress-nginx
      tag: controller-v${{package.version}}
      expected-commit: da9c5730f669d4bcad5c7146a644796cb7c24ee5

  - name: Build ingress-nginx controller from source
    runs: |
      export PKG="k8s.io/ingress-nginx"
      export COMMIT_SHA=$(git rev-parse --short HEAD)
      export REPO_INFO=$(git config --get remote.origin.url)$

      mkdir -p ${{targets.destdir}}

      export CGO_ENABLED=0

      go build -x -v \
      -trimpath -ldflags="-buildid= -w -s \
      -X ${PKG}/version.RELEASE=controller-v${{package.version}} \
      -X ${PKG}/version.COMMIT=${COMMIT_SHA} \
      -X ${PKG}/version.REPO=${REPO_INFO}" \
      -o "${{targets.destdir}}/dbg" ${PKG}/cmd/dbg

      go build -x -v \
      -trimpath -ldflags="-buildid= -w -s \
      -X ${PKG}/version.RELEASE=controller-v${{package.version}} \
      -X ${PKG}/version.COMMIT=${COMMIT_SHA} \
      -X ${PKG}/version.REPO=${REPO_INFO}" \
      -o "${{targets.destdir}}/waitshutdown" ${PKG}/cmd/waitshutdown

      go build -x -v \
      -trimpath -ldflags="-buildid= -w -s \
      -X ${PKG}/version.RELEASE=controller-v${{package.version}} \
      -X ${PKG}/version.COMMIT=${COMMIT_SHA} \
      -X ${PKG}/version.REPO=${REPO_INFO}" \
      -o "${{targets.destdir}}/nginx-ingress-controller" ${PKG}/cmd/nginx

      setcap cap_net_bind_service=+ep ${{targets.destdir}}/nginx-ingress-controller \
      && setcap -v cap_net_bind_service=+ep ${{targets.destdir}}/nginx-ingress-controller

      getcap ${{targets.destdir}}/nginx-ingress-controller

  - uses: fetch
    with:
      uri: https://nginx.org/download/nginx-${{vars.NGINX_VERSION}}.tar.gz
      expected-sha256: 05dd6d9356d66a74e61035f2a42162f8c754c97cf1ba64e7a801ba158d6c0711
      strip-components: 0

  - uses: fetch
    with:
      uri: https://github.com/simpl/ngx_devel_kit/archive/v${{vars.NDK_VERSION}}.tar.gz
      expected-sha256: aa961eafb8317e0eb8da37eb6e2c9ff42267edd18b56947384e719b85188f58b
      strip-components: 0

  - uses: fetch
    with:
      uri: https://github.com/openresty/set-misc-nginx-module/archive/v${{vars.SETMISC_VERSION}}.tar.gz
      expected-sha256: cd5e2cc834bcfa30149e7511f2b5a2183baf0b70dc091af717a89a64e44a2985
      strip-components: 0

  - runs: |
      rm -rf v0.33.tar.gz

  - uses: fetch
    with:
      uri: https://github.com/openresty/headers-more-nginx-module/archive/v${{vars.MORE_HEADERS_VERSION}}.tar.gz
      expected-sha256: 0c0d2ced2ce895b3f45eb2b230cd90508ab2a773299f153de14a43e44c1209b3
      strip-components: 0

  - uses: fetch
    with:
      uri: https://github.com/yaoweibin/ngx_http_substitutions_filter_module/archive/${{vars.NGINX_SUBSTITUTIONS}}.tar.gz
      expected-sha256: da2a26aa75884e1216941c7291b6e8b7fc4dd7163700a04191b92060b61fabb3
      strip-components: 0

  - uses: fetch
    with:
      uri: https://github.com/openresty/lua-nginx-module/archive/v${{vars.LUA_NGX_VERSION}}.tar.gz
      expected-sha256: bc764db42830aeaf74755754b900253c233ad57498debe7a441cee2c6f4b07c2
      strip-components: 0

  - uses: fetch
    with:
      uri: https://github.com/openresty/stream-lua-nginx-module/archive/v${{vars.LUA_STREAM_NGX_VERSION}}.tar.gz
      expected-sha256: 01b715754a8248cc7228e0c8f97f7488ae429d90208de0481394e35d24cef32f
      strip-components: 0

  - uses: fetch
    with:
      uri: https://github.com/openresty/lua-upstream-nginx-module/archive/${{vars.LUA_UPSTREAM_VERSION}}.tar.gz
      expected-sha256: e0baff472e1e8820d355701890f0c075ea0f0ba4ba6ca975f896912ae3b815c2
      strip-components: 0

  - uses: fetch
    with:
      uri: https://github.com/atomx/nginx-http-auth-digest/archive/v${{vars.NGINX_DIGEST_AUTH}}.tar.gz
      expected-sha256: f09851e6309560a8ff3e901548405066c83f1f6ff88aa7171e0763bd9514762b
      strip-components: 0

  - uses: fetch
    with:
      uri: https://github.com/opentracing-contrib/nginx-opentracing/archive/v${{vars.NGINX_OPENTRACING_VERSION}}.tar.gz
      expected-sha256: 30172ba368f95be7d7ff7b3fc288297540531ad5ad018c1f97b1d60516156db3
      strip-components: 0

  - uses: fetch
    with:
      uri: https://github.com/SpiderLabs/ModSecurity-nginx/archive/v${{vars.MODSECURITY_NGINX_VERSION}}.tar.gz
      expected-sha256: 32a42256616cc674dca24c8654397390adff15b888b77eb74e0687f023c8751b
      strip-components: 0

  - uses: fetch
    with:
      uri: https://github.com/leev/ngx_http_geoip2_module/archive/${{vars.GEOIP2_VERSION}}.tar.gz
      expected-sha256: b6c9c09fd43eb34a71e706ad780b2ead26549a9a9f59280fe558f5b7b980b7c6
      strip-components: 0

  - runs: |
      git clone --depth=1 https://github.com/google/ngx_brotli.git
      cd ngx_brotli
      git checkout ${{vars.NGX_BROTLI_SHA}}
      git submodule init
      git submodule update

  - name: Build NGINX
    runs: |
      export BUILD_PATH="${PWD}"
      echo "BUILD_PATH $BUILD_PATH"
      echo "Arch: $(uname -m)"
      # improve compilation times
      CORES=$(($(grep -c ^processor /proc/cpuinfo) - 1))

      export LUAJIT_LIB="$(pkgconf --variable=libdir luajit)"
      export LUAJIT_INC="$(pkgconf --variable=includedir luajit)"
      export LUA_LIB_DIR="$LUAJIT_LIB/lua"
      ln -s "$LUAJIT_INC" /usr/include/lua
      export LUA_INCLUDE_DIR=/usr/include/luajit-2.1
      ln -s $LUA_INCLUDE_DIR /usr/include/lua5.1
      ARCH=$(uname -m)

      ls -lah ${BUILD_PATH}/lua-nginx-module-${{vars.LUA_NGX_VERSION}}
      echo /usr/local/lib >> /etc/ld.so.conf
      ldconfig
      cat /etc/ld.so.conf

      mkdir -p ${{targets.destdir}}/etc/nginx/
      cp -ar /etc/nginx/ ${{targets.destdir}}/etc/nginx/

      # Geo ip data from nginx image
      cp -ar images/nginx/rootfs/etc/nginx/. ${{targets.destdir}}/etc/nginx/

      # Lua code copied into the target
      cp -ar rootfs/etc/nginx/. ${{targets.destdir}}/etc/nginx/

      # Download owasp modsecurity crs
      cd ${{targets.destdir}}/etc/nginx/

      git clone -b ${{vars.OWASP_MODSECURITY_CRS_VERSION}} https://github.com/coreruleset/coreruleset owasp-modsecurity-crs
      cd owasp-modsecurity-crs

      mv crs-setup.conf.example crs-setup.conf
      mv rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf
      mv rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf.example rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf

      # OWASP CRS v3 rules
      echo '
      Include /etc/nginx/owasp-modsecurity-crs/crs-setup.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-901-INITIALIZATION.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-903.9001-DRUPAL-EXCLUSION-RULES.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-903.9002-WORDPRESS-EXCLUSION-RULES.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-905-COMMON-EXCEPTIONS.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-910-IP-REPUTATION.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-911-METHOD-ENFORCEMENT.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-912-DOS-PROTECTION.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-913-SCANNER-DETECTION.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-921-PROTOCOL-ATTACK.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-930-APPLICATION-ATTACK-LFI.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-931-APPLICATION-ATTACK-RFI.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-933-APPLICATION-ATTACK-PHP.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-934-APPLICATION-ATTACK-NODEJS.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-942-APPLICATION-ATTACK-SQLI.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-944-APPLICATION-ATTACK-JAVA.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/REQUEST-949-BLOCKING-EVALUATION.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/RESPONSE-950-DATA-LEAKAGES.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/RESPONSE-951-DATA-LEAKAGES-SQL.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/RESPONSE-952-DATA-LEAKAGES-JAVA.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/RESPONSE-953-DATA-LEAKAGES-PHP.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/RESPONSE-954-DATA-LEAKAGES-IIS.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/RESPONSE-959-BLOCKING-EVALUATION.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/RESPONSE-980-CORRELATION.conf
      Include /etc/nginx/owasp-modsecurity-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf
      ' > ${{targets.destdir}}/etc/nginx/owasp-modsecurity-crs/nginx-modsecurity.conf


      echo "::::::::::::::::::::::::::::::::::::::"
      echo ":::: nginx-${{vars.NGINX_VERSION}} ::::"
      echo "::::::::::::::::::::::::::::::::::::::"

      cd "$BUILD_PATH/nginx-${{vars.NGINX_VERSION}}"
      # apply nginx patches
      for PATCH in `ls $BUILD_PATH/patches`;do
        echo "Patch: $PATCH"
        if [[ "$PATCH" == *.txt ]]; then
          patch -p0 < $BUILD_PATH/patches/$PATCH
        else
          patch -p1 < $BUILD_PATH/patches/$PATCH
        fi
      done

      WITH_FLAGS="--with-debug \
      --with-compat \
      --with-pcre-jit \
      --with-http_ssl_module \
      --with-http_stub_status_module \
      --with-http_realip_module \
      --with-http_auth_request_module \
      --with-http_addition_module \
      --with-http_geoip_module \
      --with-http_gzip_static_module \
      --with-http_sub_module \
      --with-http_v2_module \
      --with-stream \
      --with-stream_ssl_module \
      --with-stream_realip_module \
      --with-stream_ssl_preread_module \
      --with-threads \
      --with-http_secure_link_module \
      --with-http_gunzip_module"

      WITH_MODULES=" \
      --add-module=${BUILD_PATH}/ngx_devel_kit-${{vars.NDK_VERSION}} \
      --add-module=${BUILD_PATH}/set-misc-nginx-module-${{vars.SETMISC_VERSION}} \
      --add-module=${BUILD_PATH}/headers-more-nginx-module-${{vars.MORE_HEADERS_VERSION}} \
      --add-module=${BUILD_PATH}/ngx_http_substitutions_filter_module-${{vars.NGINX_SUBSTITUTIONS}} \
      --add-module=${BUILD_PATH}/lua-nginx-module-${{vars.LUA_NGX_VERSION}} \
      --add-module=${BUILD_PATH}/stream-lua-nginx-module-${{vars.LUA_STREAM_NGX_VERSION}} \
      --add-module=${BUILD_PATH}/lua-upstream-nginx-module-${{vars.LUA_UPSTREAM_VERSION}}  \
      --add-dynamic-module=${BUILD_PATH}/nginx-http-auth-digest-${{vars.NGINX_DIGEST_AUTH}} \
      --add-dynamic-module=${BUILD_PATH}/nginx-opentracing-${{vars.NGINX_OPENTRACING_VERSION}}/opentracing \
      --add-dynamic-module=${BUILD_PATH}/ModSecurity-nginx-${{vars.MODSECURITY_NGINX_VERSION}}  \
      --add-dynamic-module=${BUILD_PATH}/ngx_http_geoip2_module-${{vars.GEOIP2_VERSION}}  \
      --add-dynamic-module=${BUILD_PATH}/ngx_brotli"

      # "Combining -flto with -g is currently experimental and expected to produce unexpected results."
      # https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
      CC_OPT="-g -O2 -fPIE -fstack-protector-strong \
      -Wformat \
      -Werror=format-security \
      -Wno-deprecated-declarations \
      -fno-strict-aliasing \
      -D_FORTIFY_SOURCE=2 \
      --param=ssp-buffer-size=4 \
      -DTCP_FASTOPEN=23 \
      -fPIC \
      -Wno-cast-function-type"

      LD_OPT="-fPIE -fPIC -pie -Wl,-z,relro -Wl,-z,now"

      if [[ ${ARCH} != "aarch64" ]]; then
        WITH_FLAGS="${WITH_FLAGS} --with-file-aio"
      fi

      if [[ ${ARCH} == "x86_64" ]]; then
        CC_OPT="${CC_OPT} -m64 -mtune=generic"
      fi

      echo "::::::::::::::::::::::::::::::::::::::::::::::::::::"
      echo ":::: Configuring nginx-${{vars.NGINX_VERSION }} ::::"
      echo "::::::::::::::::::::::::::::::::::::::::::::::::::"

      ./configure \
      --prefix=/usr/local/nginx \
      --conf-path=/etc/nginx/nginx.conf \
      --modules-path=/etc/nginx/modules \
      --http-log-path=/var/log/nginx/access.log \
      --error-log-path=/var/log/nginx/error.log \
      --lock-path=/var/lock/nginx.lock \
      --pid-path=/run/nginx.pid \
      --http-client-body-temp-path=/var/lib/nginx/body \
      --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
      --http-proxy-temp-path=/var/lib/nginx/proxy \
      --http-scgi-temp-path=/var/lib/nginx/scgi \
      --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \
      ${WITH_FLAGS} \
      --without-mail_pop3_module \
      --without-mail_smtp_module \
      --without-mail_imap_module \
      --without-http_uwsgi_module \
      --without-http_scgi_module \
      --with-cc-opt="${CC_OPT}" \
      --with-ld-opt="${LD_OPT}" \
      --user=www-data \
      --group=www-data \
      ${WITH_MODULES}

      echo "::::::::::::::::::::::::::::::::::::::::::::::"
      echo ":::: MAKE nginx-${{vars.NGINX_VERSION }} ::::"
      echo "::::::::::::::::::::::::::::::::::::::::::::"
      make -j$(nproc)

      echo ":::::::::::::::::::::::::::::::::::::::::::::::::"
      echo ":::: MODULES nginx-${{vars.NGINX_VERSION }}  ::::"
      echo ":::::::::::::::::::::::::::::::::::::::::::::::::"
      make DESTDIR="${{targets.destdir}}" modules

      echo "::::::::::::::::::::::::::::::::::::::::::::::::"
      echo ":::: INSTALL nginx-${{vars.NGINX_VERSION }} ::::"
      echo "::::::::::::::::::::::::::::::::::::::::::::::"
      make DESTDIR="${{targets.destdir}}" install

      echo "::::::::::::::::::::::::::::::::::::::::::"
      echo ":::: SETCAP NGINX                     ::::"
      echo "::::::::::::::::::::::::::::::::::::::::::"

      setcap cap_net_bind_service=+ep ${{targets.destdir}}/usr/local/nginx/sbin/nginx \
        && setcap -v cap_net_bind_service=+ep ${{targets.destdir}}/usr/local/nginx/sbin/nginx

       echo "::::::::::::::::::::::::::::::::::::::::::"
       echo ":::: SETCAP DUMB INIT                  ::::"
       echo "::::::::::::::::::::::::::::::::::::::::::"

      setcap cap_net_bind_service=+ep ${{targets.destdir}}/usr/bin/dumb-init \
        && setcap -v cap_net_bind_service=+ep ${{targets.destdir}}/usr/bin/dumb-init


      echo "::::::::::::::::::::::::::::::::::::::::::::"
      echo ":::::::::::::::: CLEANUP :::::::::::::::::::"
      echo "::::::::::::::::::::::::::::::::::::::::::::"

      echo "Clean up owasp-modsecurity-crs"
      rm -rf ${{targets.destdir}}/etc/nginx/owasp-modsecurity-crs/.git
      rm -rf ${{targets.destdir}}/etc/nginx/owasp-modsecurity-crs/util/regression-tests

subpackages:
  - name: ingress-nginx-controller-compat
    description: Compatibility package for ingress-nginx-controller
    dependencies:
      runtime:
        - modsecurity-config
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/local/bin
          ln -s /usr/local/nginx/sbin/nginx ${{targets.subpkgdir}}/usr/local/bin/nginx

          mkdir -p ${{targets.subpkgdir}}/usr/bin
          ln -s /usr/local/nginx/sbin/nginx ${{targets.subpkgdir}}/usr/bin/nginx

          mkdir -p ${{targets.subpkgdir}}/etc/nginx/modsecurity
          ln -s /etc/modsecurity/modsecurity.conf-concurrent ${{targets.subpkgdir}}/etc/nginx/modsecurity/modsecurity.conf
          ln -s /etc/modsecurity/unicode.mapping ${{targets.subpkgdir}}/etc/nginx/modsecurity/unicode.mapping

          mkdir -p ${{targets.subpkgdir}}/var/log/nginx
          # Create symlinks to redirect nginx logs to stdout and stderr docker log collector
          ln -sf /dev/stdout ${{targets.subpkgdir}}/var/log/nginx/access.log
          ln -sf /dev/stderr ${{targets.subpkgdir}}/var/log/nginx/error.log

          # symlink to satisfy hard coded path to mimalloc
          # https://github.com/kubernetes/ingress-nginx/blob/8f54b538d9b32649411d9e507ca38fbee55ce51c/charts/ingress-nginx/templates/controller-daemonset.yaml#L99-L100
          mkdir -p ${{targets.subpkgdir}}/usr/local/lib
          ln -s /usr/lib/libmimalloc.so.1 ${{targets.subpkgdir}}/usr/local/lib/libmimalloc.so

update:
  enabled: true
  github:
    identifier: kubernetes/ingress-nginx
    strip-prefix: controller-v
    use-tag: true
    tag-filter: "controller-v"
