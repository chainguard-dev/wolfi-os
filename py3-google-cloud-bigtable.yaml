# Generated from https://pypi.org/project/google-cloud-bigtable/
package:
  name: py3-google-cloud-bigtable
  version: 2.27.0
  epoch: 1
  description: Google Cloud Bigtable API client library
  copyright:
    - license: Apache-2.0
  dependencies:
    provider-priority: 0

vars:
  pypi-package: google-cloud-bigtable
  import: google.cloud.bigtable

data:
  - name: py-versions
    items:
      3.10: '310'
      3.11: '311'
      3.12: '312'

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - py3-supported-build-base
      - wolfi-base

pipeline:
  - uses: git-checkout
    with:
      # README: for version v2.21.0, if you use this, update the package.version above to this version
      expected-commit: 14aec68b6e58f135e829608b9e00ffb3799833b7
      repository: https://github.com/googleapis/python-bigtable
      tag: v${{package.version}}

subpackages:
  - range: py-versions
    name: py${{range.key}}-${{vars.pypi-package}}
    description: python${{range.key}} version of ${{vars.pypi-package}}
    dependencies:
      provider-priority: ${{range.value}}
      provides:
        - py3-${{vars.pypi-package}}
      runtime:
        - py${{range.key}}-google-api-core
        - py${{range.key}}-google-cloud-core
        - py${{range.key}}-grpc-google-iam-v1
        - py${{range.key}}-proto-plus
        - py${{range.key}}-protobuf
    pipeline:
      - uses: py/pip-build-install
        with:
          python: python${{range.key}}
      - uses: strip
    test:
      pipeline:
        - uses: python/import
          with:
            python: python${{range.key}}
            imports: |
              import ${{vars.import}}

  - name: py3-supported-${{vars.pypi-package}}
    description: meta package providing ${{vars.pypi-package}} for supported python versions.
    dependencies:
      runtime:
        - py3.10-${{vars.pypi-package}}
        - py3.11-${{vars.pypi-package}}
        - py3.12-${{vars.pypi-package}}

test:
  pipeline:
    - uses: python/import
      with:
        import: ${{vars.import}}
    - name: Simple mocked usage
      uses: py/one-python
      with:
        content: |
          #!/usr/bin/env python
          import unittest
          from unittest.mock import MagicMock, patch
          from google.cloud.bigtable import Client

          class TestBigtableClient(unittest.TestCase):
              @patch('google.cloud.bigtable.Client')
              def test_write_row(self, mock_client):
                  mock_table = MagicMock()
                  mock_row = MagicMock()

                  mock_instance = MagicMock()
                  mock_client.return_value.instance.return_value = mock_instance
                  mock_instance.table.return_value = mock_table
                  mock_table.row.return_value = mock_row

                  client = Client(project="fake-project")
                  table = client.instance("fake-instance").table("fake-table")
                  row = table.row("test-row")
                  row.set_cell("cf1", b"col1", b"test-value")
                  row.commit()

                  mock_row.commit.assert_called_once()

          if __name__ == '__main__':
              unittest.main()

update:
  enabled: true
  manual: false
  github:
    identifier: googleapis/python-bigtable
    strip-prefix: v
