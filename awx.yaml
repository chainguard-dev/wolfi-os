package:
  name: awx
  version: 24.6.1
  epoch: 0
  description: AWX provides a web-based user interface, REST API, and task engine built on top of Ansible
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - libpq
      - openssl-dev
      - py3.11-jinja2
      - python-3.11
      - tzdata

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - gettext-dev
      - libffi-dev
      - libpq
      - libxml2
      - libxml2-dev
      - libxslt
      - libxslt-dev
      - make
      - nodejs
      - npm
      - nvm
      - openldap-dev
      - openssl-dev
      - pkgconf
      - pkgconf-dev
      - py3.11-build
      - py3.11-jinja2
      - py3.11-pip
      - python-3.11-dev
      - wolfi-base
      - xmlsec
      - xmlsec-dev
      - xmlsec-openssl
      - zlib-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/ansible/awx.git
      tag: ${{package.version}}
      expected-commit: 94e5795dfc37b95c576d61f3e3b4e936c021548c

  # This patch fixes two issues, the primary issue is documented here https://github.com/ansible/awx/issues/15484#issuecomment-2331674345
  # the other issue is related to xmlsec which is fixed with this https://github.com/xmlsec/python-xmlsec/issues/257#issuecomment-2063433563
  - uses: patch
    with:
      patches: fix-pip.patch

  - runs: |
      # Create virtual environment
      python -m venv venv --system-site-packages
      source venv/bin/activate

      # Install Python dependencies
      pip install --upgrade pip setuptools wheel build
      export BASE_VENV_PATH="/var/lib/awx/venv"
      CFLAGS="-Wno-error=incompatible-pointer-types" pip install --no-binary=lxml,xmlsec -r requirements/requirements.txt
      CFLAGS="-Wno-error=incompatible-pointer-types" pip install --no-binary=lxml,xmlsec -r requirements/requirements_git.txt
      make sdist
      pip install dist/awx.tar.gz
      rm -rf venv/bin/__pycache*

  - runs: |
      mkdir -p ${{targets.destdir}}/var/lib/awx/public
      mkdir -p ${{targets.destdir}}/usr/local/bin
      mkdir -p ${{targets.destdir}}/etc/tower

      cp -r ./awx/ui/build ${{targets.destdir}}/var/lib/awx/public
      # Ensure permissions without ownership change
      chmod -R 0755 ${{targets.destdir}}/var/lib/awx/public/build
      cp tools/ansible/roles/dockerfile/files/wait-for-migrations ${{targets.destdir}}/usr/local/bin/wait-for-migrations
      cp tools/ansible/roles/dockerfile/files/stop-supervisor ${{targets.destdir}}/usr/local/bin/stop-supervisor
      cp tools/ansible/roles/dockerfile/files/uwsgi.ini ${{targets.destdir}}/etc/tower/uwsgi.ini

  - runs: |
      # Create directories and copy specific files
      for dir in \
          /var/lib/awx \
          /var/lib/awx/rsyslog \
          /var/lib/awx/rsyslog/conf.d \
          /var/run/awx-rsyslog \
          /var/log/nginx; \
      do
          mkdir -p ${{targets.destdir}}$dir && chmod 0775 ${{targets.destdir}}$dir;
      done

      # Copy the required files
      cp tools/ansible/roles/dockerfile/files/rsyslog.conf ${{targets.destdir}}/var/lib/awx/rsyslog/rsyslog.conf

  - runs: |
      mkdir -p ${{targets.destdir}}/usr/bin
      mkdir -p ${{targets.destdir}}/etc/supervisord

      # Add runtime scripts
      cp tools/ansible/roles/dockerfile/files/launch_awx_web.sh ${{targets.destdir}}/usr/bin/
      cp tools/ansible/roles/dockerfile/files/launch_awx_task.sh ${{targets.destdir}}/usr/bin/
      cp tools/ansible/roles/dockerfile/files/launch_awx_rsyslog.sh ${{targets.destdir}}/usr/bin/
      cp tools/scripts/rsyslog-4xx-recovery ${{targets.destdir}}/usr/bin/
      cp tools/scripts/awx-python ${{targets.destdir}}/usr/bin/

  - runs: |
      python3 <<EOF
      from jinja2 import Environment, FileSystemLoader, Undefined
      import os

      # Define a custom bool filter
      def bool_filter(value):
          return bool(value)

      # Define a custom Undefined handler for Jinja2 to prevent errors on undefined variables
      class SilentUndefined(Undefined):
          def __str__(self):
              return ""
          def __getattr__(self, item):
              return ""

      template_dir = "tools/ansible/roles/dockerfile/templates"
      output_dir = "${{targets.destdir}}/etc"

      os.makedirs(output_dir, exist_ok=True)

      env = Environment(loader=FileSystemLoader(template_dir), undefined=SilentUndefined)

      # Add the custom bool filter to the Jinja2 environment
      env.filters['bool'] = bool_filter

      templates = ["supervisor_web.conf.j2", "supervisor_task.conf.j2", "supervisor_rsyslog.conf.j2"]
      for template_name in templates:
          template = env.get_template(template_name)
          output_path = os.path.join(output_dir, template_name.replace('.j2', ''))
          with open(output_path, 'w') as f:
              f.write(template.render(kube_dev=False))  # Provide a default value for kube_dev
      EOF

  - runs: |
      export DJANGO_SETTINGS_MODULE=awx.settings.defaults
      export SKIP_SECRET_KEY_CHECK=yes
      export SKIP_PG_VERSION_CHECK=yes
      export AWX_SETTINGS_FILE=/etc/tower/settings.py
      mkdir -p /etc/tower
      mkdir -p /var/log/tower
      touch /etc/tower/settings.py
      venv/bin/awx-manage collectstatic --noinput --clear
      sed -i "s|/home/build/venv|/var/lib/awx/venv|g" venv/pyvenv.cfg
      sed -i "s|/home/build/venv|/var/lib/awx/venv|g" venv/bin/*

  - runs: |
      mkdir -p ${{targets.contextdir}}/var/lib/awx
      # Remove unnecessary cache files
      find . -name '__pycache__' -exec rm -rf {} +
      mv venv ${{targets.destdir}}/var/lib/awx
      mv /var/lib/awx/public/static ${{targets.destdir}}/var/lib/awx/public
      mkdir -p  ${{targets.destdir}}/var/log
      mv /var/log/tower  ${{targets.destdir}}/var/log
      mv  /etc/tower/settings.py ${{targets.destdir}}/etc/tower
      ln -s ${{targets.destdir}}/var/lib/awx/venv/bin/awx-manage /usr/bin/awx-manage

update:
  enabled: true
  github:
    identifier: ansible/awx
    use-tag: true
