diff --git a/libmamba/CMakeLists.txt b/libmamba/CMakeLists.txt
index 41f6c85e..6d318a8d 100644
--- a/libmamba/CMakeLists.txt
+++ b/libmamba/CMakeLists.txt
@@ -348,192 +348,44 @@ macro(libmamba_create_target target_name linkage output_name)
     )
     mamba_target_set_lto(${target_name} MODE ${MAMBA_LTO})
 
-    if (${linkage_upper} STREQUAL "STATIC")
-        message("   -> Statically linking against libmamba (static) dependencies")
-
-        mamba_target_check_type(yaml-cpp::yaml-cpp STATIC_LIBRARY FATAL_ERROR)
-
-        if (UNIX)
-
-            set(REQUIRED_STATIC_DEPS
-                libcurl.a
-                libssh2.a
-
-                libgssapi_krb5.a
-                libkrb5.a
-                libk5crypto.a
-                libkrb5support.a
-                libcom_err.a
-
-                libssl.a
-                libcrypto.a
-
-                libarchive.a
-
-                libsolv.a
-                libsolvext.a
-
-                libiconv.a
-                libbz2.a
-                liblz4.a
-                libzstd.a
-                libz.a
-                liblzma.a
-
-                libnghttp2.a
-
-                libreproc++.a
-                libreproc.a
-            )
-            if (APPLE)
-                set(REQUIRED_STATIC_DEPS ${REQUIRED_STATIC_DEPS} libc++.a)
-            endif()
-
-            if (UNIX AND NOT APPLE)
-                list(REMOVE_ITEM REQUIRED_STATIC_DEPS libiconv.a)
-            endif()
-
-            set(STATIC_DEPS "")
-            foreach(LIB ${REQUIRED_STATIC_DEPS})
-                set(TMP_LIB "${LIB}-NOTFOUND")
-                find_library(TMP_LIB
-                    NAMES "${LIB}"
-                )
-                if (NOT ${TMP_LIB} STREQUAL "TMP_LIB-NOTFOUND")
-                    list(APPEND STATIC_DEPS "${TMP_LIB}")
-                else ()
-                    list(APPEND STATIC_DEPS "${LIB}-NOTFOUND")
-                endif ()
-            endforeach(LIB)
-
-            if (APPLE)
-                find_library(SECURITY_LIBRARY Security)
-                find_library(SYSTEMCONFIGURATION_LIBRARY SystemConfiguration)
-                find_library(COREFOUNDATION_LIBRARY CoreFoundation)
-                message("Found library: ${SECURITY_LIBRARY}\n${COREFOUNDATION_LIBRARY}")
-                list(APPEND STATIC_DEPS ${COREFOUNDATION_LIBRARY} ${SECURITY_LIBRARY} ${SYSTEMCONFIGURATION_LIBRARY})
-            endif()
-
-            message("   -> Found static dependencies:")
-            foreach(LIB ${STATIC_DEPS})
-                message("      - ${LIB}")
-            endforeach(LIB)
-
-            if (APPLE)
-                set (MAMBA_FORCE_DYNAMIC_LIBS resolv c++abi)
-                target_link_options(${target_name} PRIVATE -nostdlib++)
-            elseif (UNIX)
-                set(MAMBA_FORCE_DYNAMIC_LIBS rt dl resolv)
-                target_link_options(${target_name} PUBLIC -static-libstdc++ -static-libgcc)
-            endif()
-
-
-            add_compile_definitions(SPDLOG_FMT_EXTERNAL)
-            target_link_libraries(
-              ${target_name}
-              PUBLIC
-                ${STATIC_DEPS}
-                ${MAMBA_FORCE_DYNAMIC_LIBS}
-                fmt::fmt-header-only
-                spdlog::spdlog_header_only
-                yaml-cpp::yaml-cpp
-             )
-
-        elseif (WIN32)
-
-            set(CMAKE_PREFIX_PATH "$ENV{VCPKG_ROOT}/installed/x64-windows-static-md/")
-
-            # For Windows we have a vcpkg based build system right now.
-            find_package(LibArchive REQUIRED)
-            find_package(CURL CONFIG REQUIRED)
-            find_library(LIBLZMA_LIBRARIES lzma REQUIRED)
-            find_library(LZ4_LIBRARY NAMES lz4)
-            find_library(LZO2_LIBRARY NAMES lzo2)
-            find_package(zstd CONFIG REQUIRED)
-            find_library(BZIP2_LIBRARIES NAMES bz2)
-            find_library(CRYPTO_LIBRARIES NAMES libcrypto)
-
-            find_library(LIBSOLV_BUILD_STATICRARIES NAMES solv_static)
-            find_library(LIBSOLVEXT_BUILD_STATICRARIES NAMES solvext_static)
-            find_package(reproc++ CONFIG REQUIRED)
-
-            find_library(LIBXML2_LIBRARY NAMES libxml2)
-            find_library(ICONV_LIBRARY NAMES libiconv iconv)
-            find_library(CHARSET_LIBRARY NAMES libcharset charset)
-            message("Found: ${LIBXML2_LIBRARY} ${ICONV_LIBRARY} ${CHARSET_LIBRARY}")
-
-            target_link_libraries(${target_name} PUBLIC
-                ${CRYPTO_LIBRARIES}
-                ${LibArchive_LIBRARY}
-                ${LIBXML2_LIBRARY}
-                ${ICONV_LIBRARY}
-                ${CHARSET_LIBRARY}
-                zstd::libzstd_static
-                ${LZ4_LIBRARY}
-                ${LZO2_LIBRARY}
-                ${BZIP2_LIBRARIES}
-                ${LIBLZMA_LIBRARIES}
-                CURL::libcurl
-                fmt::fmt-header-only
-                # Since conda-forge spdlog is built with a bundled version of fmt we use the
-                # header only version to avoid chasing after the correct fmt version mathching
-                # the one used in the bundle
-                spdlog::spdlog_header_only
-                yaml-cpp::yaml-cpp
-                ${LIBSOLV_BUILD_STATICRARIES}
-                ${LIBSOLVEXT_BUILD_STATICRARIES}
-                ${sodium_LIBRARY_RELEASE}
-                reproc++
-                reproc
-            )
-
-            add_compile_definitions(
-              SPDLOG_FMT_EXTERNAL
-              LIBARCHIVE_STATIC
-              CURL_STATICLIB
-              SOLV_BUILD_STATIC
-            )
-            include_directories($ENV{CONDA_PREFIX}/Library/include/)
-            include_directories($ENV{VCPKG_ROOT}/installed/x64-windows-static-md/include/)
-        endif()
-    else ()
-        message("   -> Dynamically linking against libmamba (shared) dependencies")
-
-        mamba_target_check_type(yaml-cpp::yaml-cpp SHARED_LIBRARY WARNING)
-
-        find_library(LIBSOLV_LIBRARIES NAMES solv)
-        find_library(LIBSOLVEXT_LIBRARIES NAMES solvext)
-        find_package(CURL REQUIRED)
-        find_package(LibArchive REQUIRED)
-        find_package(zstd REQUIRED)
-        find_package(BZip2 REQUIRED)
-        find_package(OpenSSL REQUIRED)
-        find_package(reproc++ CONFIG REQUIRED)
-
-        set(LIBMAMBA_LIBRARIES_DEPS
-            ${LIBSOLV_LIBRARIES}
-            ${LIBSOLVEXT_LIBRARIES}
-            ${LibArchive_LIBRARIES}
-            zstd::libzstd_shared
-            ${CURL_LIBRARIES}
-            ${OPENSSL_LIBRARIES}
-            zstd::libzstd_shared
-            BZip2::BZip2
-            yaml-cpp::yaml-cpp
-            reproc++
-            reproc
-            fmt::fmt
-            # Since conda-forge spdlog is built with a bundled version of fmt we use the
-            # header only version to avoid chasing after the correct fmt version mathching
-            # the one used in the bundle
-            spdlog::spdlog_header_only
-        )
 
-        add_compile_definitions(SPDLOG_FMT_EXTERNAL)
-        target_link_libraries(${target_name} PUBLIC
-                              ${LIBMAMBA_LIBRARIES_DEPS}
-                              ${MAMBA_FORCE_DYNAMIC_LIBS})
-    endif ()
+    message("   -> Using shared libraries for libmamba dependencies")
+
+    mamba_target_check_type(yaml-cpp::yaml-cpp SHARED_LIBRARY WARNING)
+
+    find_library(LIBSOLV_LIBRARIES NAMES solv)
+    find_library(LIBSOLVEXT_LIBRARIES NAMES solvext)
+    find_package(CURL REQUIRED)
+    find_package(LibArchive REQUIRED)
+    find_package(zstd REQUIRED)
+    find_package(BZip2 REQUIRED)
+    find_package(OpenSSL REQUIRED)
+    find_package(reproc++ CONFIG REQUIRED)
+
+    set(LIBMAMBA_LIBRARIES_DEPS
+        ${LIBSOLV_LIBRARIES}
+        ${LIBSOLVEXT_LIBRARIES}
+        ${LibArchive_LIBRARIES}
+        zstd::libzstd_shared
+        ${CURL_LIBRARIES}
+        ${OPENSSL_LIBRARIES}
+        zstd::libzstd_shared
+        BZip2::BZip2
+        yaml-cpp::yaml-cpp
+        reproc++
+        reproc
+        fmt::fmt
+        # Since conda-forge spdlog is built with a bundled version of fmt we use the
+        # header only version to avoid chasing after the correct fmt version mathching
+        # the one used in the bundle
+        spdlog::spdlog_header_only
+    )
+
+    add_compile_definitions(SPDLOG_FMT_EXTERNAL)
+    target_link_libraries(${target_name} PUBLIC
+                          ${LIBMAMBA_LIBRARIES_DEPS}
+                          ${MAMBA_FORCE_DYNAMIC_LIBS})
+
 
     target_compile_features(${target_name} PUBLIC cxx_std_17)
 
