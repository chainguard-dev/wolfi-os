name: Run a build using the go compiler

needs:
  packages:
    - go-fips
    - busybox
    - ca-certificates-bundle

inputs:
  packages:
    description: |
      List of space-separated packages to compile. Files con also be specified.
      This value is passed as an argument to go build. All paths are relative
      to inputs.modroot.
    required: true

  tags:
    description: |
      A comma-separated list of build tags to pass to the go compiler
  
  output:
    description: |
      Filename to use when writing the binary. The final install location inside 
      the apk will be in prefix / install-dir / output
    required: true

  vendor:
    description: |
      If true, the go mod command will also update the vendor directory
    default: "false"

  subpackage:
    description: |
      Indicates that the build will write to a subpackage target folder
    default: "false"

  modroot:
    default: "."
    required: false
    description: |
      Top directory of the go module, this is where go.mod lives. Before buiding
      the go pipeline wil cd into this directory.

  prefix:
    description: |
      Prefix to relocate binaries
    default: usr

  ldflags:
    description:
      List of [pattern=]arg to pass to the go compiler with -ldflags

  install-dir:
    description: |
      Directory where binaries will be installed
    default: bin

  deps:
    description: |
      space separated list of go modules to update before building. example: github.com/foo/bar@v1.2.3

pipeline:
  - runs: |
      TAGS=""
      LDFLAGS=""

      if [ ! "${{inputs.tags}}" == "" ]; then
        TAGS="${{inputs.tags}}"
      fi

      if [ ! "${{inputs.ldflags}}" == "" ]; then
        LDFLAGS="${{inputs.ldflags}}"
      fi

      BASE_PATH="${{inputs.prefix}}/${{inputs.install-dir}}/${{inputs.output}}"
      if [ "${{inputs.subpackage}}" == "true" ]; then
        DEST_PATH="-o ${{targets.subpkgdir}}/${BASE_PATH}"
      else
        DEST_PATH="-o ${{targets.destdir}}/${BASE_PATH}"
      fi

      cd "${{inputs.modroot}}"

      # Install any specified dependencies
      if [ ! "${{inputs.deps}}" == "" ]; then
        for dep in ${{inputs.deps}}; do
          go get $dep
        done
        go mod tidy
        # If vendor is specified, update the vendor directory
        "${{inputs.vendor}}" && go mod vendor
      fi
      go build ${DEST_PATH} -tags "${TAGS}" -ldflags "${LDFLAGS}" -trimpath ${{inputs.packages}}
