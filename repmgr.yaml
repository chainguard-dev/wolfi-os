package:
  name: repmgr
  version: 5.5.0
  epoch: 0
  description: "A lightweight replication manager for PostgreSQL"
  copyright:
    - license: GPL-3.0-only

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - ca-certificates-bundle
      - curl-dev
      - docbook-xml
      - flex
      - git
      - json-c-dev
      - krb5-dev
      - libedit-dev
      - libpq
      - libssl3
      - libxml2-dev
      - libxslt-dev
      - linux-pam-dev
      - openssl-dev
      - postgresql-dev
      - readline-dev
      - wolfi-base

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/EnterpriseDB/repmgr
      tag: v${{package.version}}
      expected-commit: 4e5246f210ed83c4897ce3200c7ae149e25257a4

  - uses: autoconf/configure

  - uses: autoconf/make

  - uses: autoconf/make-install

  - name: Symlink repmgr binaries
    runs: |
      mkdir -p "${{targets.destdir}}/usr/bin"
      ln -sf /usr/libexec/postgresql17/repmgr ${{targets.destdir}}/usr/bin/repmgr
      ln -sf /usr/libexec/postgresql17/repmgrd ${{targets.destdir}}/usr/bin/repmgrd

subpackages:
  - name: "${{package.name}}-dev"
    description: "${{package.name}} development headers"
    pipeline:
      - uses: split/dev
    test:
      pipeline:
        - uses: test/pkgconf

update:
  enabled: true
  ignore-regex-patterns:
    - rc*
  github:
    identifier: EnterpriseDB/repmgr
    use-tag: true
    strip-prefix: v
    tag-filter: v

test:
  environment:
    contents:
      packages:
        - postgresql
        - repmgr
        - shadow
        - sudo-rs
        - glibc-locales
        - postgresql-client
    environment:
      PGDATA: /tmp/test_db
      PGUSER: repmgruser
      PGPASS: repmgrpassword
      PGDB: repmgr_test
  pipeline:
    - name: Create a non-root PostgreSQL user
      runs: |
        useradd repmgruser
        echo "${PGUSER}:${PGPASS}" | chpasswd
    - name: Initialize PostgreSQL as non-root user
      runs: |
        sudo -u ${PGUSER} initdb -D ${PGDATA}
        sudo -u ${PGUSER} pg_ctl -D ${PGDATA} -l /tmp/logfile start
        sudo -u ${PGUSER} createdb ${PGDB}
        sudo -u ${PGUSER} psql -d ${PGDB} -c "GRANT ALL PRIVILEGES ON SCHEMA public TO ${PGUSER};"
    - name: Configure primary for replication
      runs: |
        echo "host replication ${PGUSER} 127.0.0.1/32 md5" | sudo tee -a ${PGDATA}/pg_hba.conf
        echo "host replication ${PGUSER} ::1/128 md5" | sudo tee -a ${PGDATA}/pg_hba.conf
        echo "wal_level = replica" | sudo tee -a ${PGDATA}/postgresql.conf
        echo "archive_mode = on" | sudo tee -a ${PGDATA}/postgresql.conf
        echo "max_wal_senders = 5" | sudo tee -a ${PGDATA}/postgresql.conf
        echo "hot_standby = on" | sudo tee -a ${PGDATA}/postgresql.conf
        sudo -u ${PGUSER} pg_ctl -D ${PGDATA} restart
    - name: Create repmgr configuration for primary
      runs: |
        cat <<EOF | sudo tee /etc/repmgr.conf
        node_id=1
        node_name=primary_node
        conninfo='host=localhost port=5432 user=${PGUSER} dbname=${PGDB} password=${PGPASS}'
        data_directory='${PGDATA}'
        log_file='/tmp/repmgr_primary.log'
        EOF
        sudo chown ${PGUSER}:${PGUSER} /etc/repmgr.conf
    - name: Register primary node
      runs: |
        sudo -u ${PGUSER} repmgr -f /etc/repmgr.conf primary register
    - name: Initialize standby PostgreSQL node
      runs: |
        sudo -u ${PGUSER} pg_basebackup -D /tmp/test_db_standby -R -X stream -c fast -U ${PGUSER} -h localhost
        echo "primary_conninfo = 'host=localhost port=5432 user=${PGUSER} password=${PGPASS} application_name=standby_node'" \
        | sudo tee -a /tmp/test_db_standby/postgresql.auto.conf
        echo "port = 5433" | sudo tee -a /tmp/test_db_standby/postgresql.auto.conf
        sudo chown -R ${PGUSER}:${PGUSER} /tmp/test_db_standby
    - name: Start standby PostgreSQL server
      runs: |
        sudo -u ${PGUSER} pg_ctl -D /tmp/test_db_standby -l /tmp/logfile_standby start
    - name: Wait for standby to be ready
      runs: |
        until PGPASSWORD=${PGPASS} psql -p 5433 -U ${PGUSER} -d ${PGDB} -c "SELECT 1" >/dev/null 2>&1; do
          echo "Waiting for standby to be ready..."
          sleep 2
        done
    - name: Create repmgr configuration for standby
      runs: |
        cat <<EOF | sudo tee /etc/repmgr_standby.conf
        node_id=2
        node_name=standby_node
        conninfo='host=localhost port=5433 user=${PGUSER} dbname=${PGDB} password=${PGPASS}'
        data_directory='/tmp/test_db_standby'
        log_file='/tmp/repmgr_standby.log'
        EOF
        sudo chown ${PGUSER}:${PGUSER} /etc/repmgr_standby.conf
    - name: Start and register standby node
      runs: |
        sudo -u ${PGUSER} repmgr -f /etc/repmgr_standby.conf standby register --upstream-node-id=1
    - name: Verify cluster configuration
      runs: |
        sudo -u ${PGUSER} repmgr cluster show
