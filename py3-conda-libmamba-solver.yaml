package:
  name: py3-conda-libmamba-solver
  version: 24.11.1
  epoch: 0
  description: The libmamba based solver for conda.
  copyright:
    - license: BSD-3-Clause
  dependencies:
    runtime:
      - py3-boltons
      - py3-libmambapy
      - python3

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - py3-build
      - py3-installer
      - py3-setuptools
      - python3
      - wolfi-base
  environment:
    # This is needed to work around the error "ValueError: ZIP does not support timestamps before 1980"
    SOURCE_DATE_EPOCH: 315532800

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/conda/conda-libmamba-solver
      tag: ${{package.version}}
      expected-commit: e09df1271eac29b62c0c773a24c5b05a9dd5b8ae

  - name: Python Build
    runs: python -m build

  - name: Python Install
    runs: python -m installer -d "${{targets.destdir}}/" dist/*.whl

  - uses: strip

update:
  enabled: true
  github:
    identifier: conda/conda-libmamba-solver

test:
  environment:
    contents:
      packages:
        - python3
        - conda
  pipeline:
    - runs: |
        python3 -c "import conda_libmamba_solver"
    - name: "Run comprehensive solver test"
      runs: |
        python3 <<-EOF
        from conda.models.match_spec import MatchSpec
        from conda.models.channel import Channel
        from conda_libmamba_solver.solver import LibMambaSolver

        # Test a simple solve scenario
        channel = Channel('defaults')
        solver = LibMambaSolver(
            prefix='/tmp/test-env',
            channels=[channel],
            specs_to_add=[MatchSpec('python=3.10'), MatchSpec('numpy')]
        )

        try:
            solution = solver.solve_final_state()
            if not solution:
                raise Exception("No solution returned.")

            # Check that expected packages are present
            solved_names = {pkg.name for pkg in solution}
            for expected in ['python', 'numpy']:
                if expected not in solved_names:
                    raise Exception(f"Expected {expected} in solution, got {solved_names}")

            print("Solver returned a valid solution containing python and numpy.")

        except Exception as e:
            print(f"Error during solver test: {e}")
            exit(1)

        # Test a conflicting scenario
        solver.specs_to_add = [MatchSpec('python=3.10'), MatchSpec('python=3.9')]
        try:
            conflict_solution = solver.solve_final_state()
            raise Exception("Expected a conflict, but solver returned a solution.")
        except Exception as conflict_exception:
            print("As expected, no solution could be found for conflicting specs.")
        EOF
