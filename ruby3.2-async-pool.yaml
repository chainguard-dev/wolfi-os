package:
  name: ruby3.2-async-pool
  version: 0.10.1
  epoch: 0
  description: A singleplex and multiplex resource pool for implementing robust clients.
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - ruby-3.2
      - ruby3.2-async

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-3.2
      - ruby-3.2-dev

vars:
  gem: async-pool

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 2b213d0cbdca13888233542268973a695196e95a
      repository: https://github.com/socketry/async-pool
      tag: v${{package.version}}

  - uses: patch
    with:
      patches: 001-remove-signing-key.patch

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

update:
  enabled: true
  github:
    identifier: socketry/async-pool
    strip-prefix: v
    use-tag: true

test:
  environment:
    contents:
      packages:
        - ruby3.2-traces
  pipeline:
    - name: "Check Gem Installation"
      runs: |
        if gem list | grep -q "${{vars.gem}}"; then
          echo "${{vars.gem}} gem installed successfully."
        else
          echo "${{vars.gem}} gem installation failed!" && exit 1
        fi
    - name: "Test Functionality"
      runs: |
        cat <<EOF > test_async_pool.rb
        require 'async'
        require 'async/pool'

        # Mock resource with required methods
        class MockResource
          def concurrency
            1  # The resource can only handle one task at a time
          end

          def use(task)
            puts "Resource acquired by task #{task}"
            sleep(1)
            puts "Resource released by task #{task}"
          end

          def close
            puts "Resource closed"
          end

          def reusable?
            true  # Indicates that the resource can be reused
          end

          def viable?
            true  # Indicates that the resource is in a valid state to be used
          end
        end

        # Initialize pool with a constructor lambda that creates a new MockResource
        pool = Async::Pool::Controller.new(-> { MockResource.new }) do |resource, task|
          resource.use(task)
        end

        # Schedule tasks to run in parallel
        Async do
          2.times do |i|
            pool.acquire do |resource|
              resource.use(i)
            end
          end
        end

        puts "Async pool test completed."
        EOF

        ruby test_async_pool.rb || (echo "${{vars.gem}} test failed!" && exit 1)
