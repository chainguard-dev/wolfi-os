package:
  name: openjdk-11
  version: 11.0.21.9
  epoch: 0
  description:
  copyright:
    - license: GPL-2.0-only
  dependencies:
    runtime:
      - openjdk-11-jre

environment:
  contents:
    packages:
      - busybox
      - ca-certificates-bundle
      - build-base
      - automake
      - autoconf
      - file
      - freetype-dev
      - cups-dev
      - libx11-dev
      - libxext-dev
      - libxrender-dev
      - libxrandr-dev
      - libxtst-dev
      - libxt-dev
      - alsa-lib-dev
      - libffi-dev
      - bash
      - zip
      - fontconfig-dev
      - libxi-dev
      - libjpeg-turbo-dev
      - giflib-dev
      - lcms2-dev
      - openjdk-10-default-jvm
      - openjdk-10

# transform melange version to contain "+" rather than third "." so we can use a var in the fetch URL
var-transforms:
  - from: ${{package.version}}
    match: \.(\d+)$
    replace: +$1
    to: mangled-package-version

pipeline:
  - uses: fetch
    with:
      uri: https://github.com/openjdk/jdk11u/archive/refs/tags/jdk-${{vars.mangled-package-version}}.tar.gz
      expected-sha256: cac21a4d293f4e3e66bb3d7ebfc1f4a7e9e5f417af2ca609a318d557d4ed60e5

  - runs: chmod +x configure

  - uses: autoconf/configure
    with:
      opts: |
        --with-boot-jdk=/usr/lib/jvm/java-10-openjdk \
        --prefix=/usr/lib/jvm/java-11-openjdk \
        --with-vendor-name=wolfi \
        --with-vendor-url=https://wolfi.dev \
        --with-vendor-bug-url=https://github.com/wolfi-dev/os/issues \
        --with-version-opt="wolfi-r${{package.epoch}}" \
        --disable-warnings-as-errors \
        --disable-precompiled-headers \
        --enable-dtrace=no \
        --with-zlib=system \
        --with-debug-level=release \
        --with-native-debug-symbols=internal \
        --with-jvm-variants=server \
        --with-jtreg=no  \
        --with-libpng=system \
        --with-jvm-variants=server \
        --with-libjpeg=system \
        --with-giflib=system \
        --with-lcms=system \
        --with-version-string="${{vars.mangled-package-version}}"

  - runs: make jdk-image

  # Check we built something valid
  - runs: |
      _java_bin="./build/*-normal-server-release/images/jdk/bin"

      $_java_bin/javac -d . HelloWorld.java
      $_java_bin/java HelloWorld

      # NOTE: Disable flakey tests for now as we're seeing builds hang on aarch64
      # # run the gtest unittest suites
      # make test-hotspot-gtest

  - runs: |
      _java_home="usr/lib/jvm/java-11-openjdk"

      mkdir -p "${{targets.contextdir}}"/$_java_home
      cp -r build/*-normal-server-release/images/jdk/* "${{targets.contextdir}}"/$_java_home
      rm "${{targets.contextdir}}"/$_java_home/lib/src.zip

subpackages:
  - name: "openjdk-11-dbg"
    description: "OpenJDK 11 Java Debug Symbols"
    pipeline:
      - uses: split/debug
    dependencies:
      runtime:
        - openjdk-11

  - name: "openjdk-11-jre"
    description: "OpenJDK 11 Java Runtime Environment"
    dependencies:
      runtime:
        - freetype
        - libfontconfig1
        - openjdk-11-jre-base
    pipeline:
      - runs: |
          _java_home="usr/lib/jvm/java-11-openjdk"

          mkdir -p "${{targets.contextdir}}"/$_java_home/lib
          mv "${{targets.contextdir}}"/$_java_home/lib/libawt_xawt.so \
              "${{targets.contextdir}}"/$_java_home/lib/libfontmanager.so \
              "${{targets.contextdir}}"/$_java_home/lib/libjavajpeg.so \
              "${{targets.contextdir}}"/$_java_home/lib/libjawt.so \
              "${{targets.contextdir}}"/$_java_home/lib/libjsound.so \
              "${{targets.contextdir}}"/$_java_home/lib/liblcms.so \
              "${{targets.contextdir}}"/$_java_home/lib/libsplashscreen.so \
              "${{targets.contextdir}}"/$_java_home/lib

  - name: "openjdk-11-jre-base"
    description: "OpenJDK 11 Java Runtime Environment (headless)"
    dependencies:
      runtime:
        - java-common
        - java-cacerts
    pipeline:
      - runs: |
          _java_home="usr/lib/jvm/java-11-openjdk"

          mkdir -p "${{targets.contextdir}}"/$_java_home
          mv "${{targets.contextdir}}"/$_java_home/lib \
             "${{targets.contextdir}}"/$_java_home

          mkdir -p "${{targets.contextdir}}"/$_java_home/bin
          for i in java \
                    jfr \
                    jjs \
                    jrunscript \
                    keytool \
                    pack200 \
                    rmid \
                    rmiregistry \
                    unpack200; do
            mv "${{targets.contextdir}}"/$_java_home/bin/$i "${{targets.contextdir}}"/$_java_home/bin/$i
          done

          [ "${{build.arch}}" = "x86_64" ] && \
            mv "${{targets.contextdir}}"/$_java_home/bin/jaotc "${{targets.contextdir}}"/$_java_home/bin/jaotc

          mv "${{targets.contextdir}}"/$_java_home/legal "${{targets.contextdir}}"/$_java_home
          mv "${{targets.contextdir}}"/$_java_home/conf "${{targets.contextdir}}"/$_java_home
          mv "${{targets.contextdir}}"/$_java_home/release "${{targets.contextdir}}"/$_java_home
          cp ASSEMBLY_EXCEPTION \
              LICENSE \
              README.md \
             "${{targets.contextdir}}"/$_java_home

          # symlink to shared java cacerts store
          rm -f "${{targets.contextdir}}"/$_java_home/lib/security/cacerts
          ln -sf /etc/ssl/certs/java/cacerts \
            "${{targets.contextdir}}"/$_java_home/lib/security/cacerts

          # symlink for `java-common` to work (which expects jre in $_java_home/jre)
          ln -sf . "${{targets.contextdir}}/$_java_home/jre"

  - name: "openjdk-11-jmods"
    description: "OpenJDK 11 jmods"
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}"/usr/lib/jvm/java-11-openjdk
          mv "${{targets.contextdir}}"/usr/lib/jvm/java-11-openjdk/jmods \
             "${{targets.contextdir}}"/usr/lib/jvm/java-11-openjdk

  - name: "openjdk-11-doc"
    description: "OpenJDK 11 Documentation"
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}"/usr/lib/jvm/java-11-openjdk
          mv "${{targets.contextdir}}"/usr/lib/jvm/java-11-openjdk/man \
             "${{targets.contextdir}}"/usr/lib/jvm/java-11-openjdk

  - name: "openjdk-11-demos"
    description: "OpenJDK 11 Demos"
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}"/usr/lib/jvm/java-11-openjdk
          mv "${{targets.contextdir}}"/usr/lib/jvm/java-11-openjdk/demo \
             "${{targets.contextdir}}"/usr/lib/jvm/java-11-openjdk

  - name: "openjdk-11-default-jvm"
    description: "Use the openjdk-11 JVM as the default JVM"
    dependencies:
      runtime:
        - openjdk-11-jre
      provides:
        - default-jvm=1.11
        - default-jvm-lts=1.11
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}"/usr/lib/jvm
          ln -sf java-11-openjdk "${{targets.contextdir}}"/usr/lib/jvm/default-jvm

  - name: "openjdk-11-default-jdk"
    description: "Use the openjdk-11 JVM as the default JVM with the JDK installed"
    dependencies:
      runtime:
        - openjdk-11-default-jvm
        - openjdk-11
      provides:
        - default-jdk=1.11
        - default-jdk-lts=1.11

update:
  enabled: true
  shared: true
  version-transform:
    - match: \+(\d+)$
      replace: .$1
  github:
    identifier: openjdk/jdk11u
    strip-prefix: jdk-
    tag-filter: jdk-11
    use-tag: true
