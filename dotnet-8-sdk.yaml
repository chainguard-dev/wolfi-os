package:
  name: dotnet-8-sdk
  version: 8.0.204
  epoch: 0
  description: ".NET CORE SDK version 8"
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - aspnet-8-runtime
      - aspnet-8-targeting-pack
      - dotnet-8-runtime
      - dotnet-8-targeting-pack
      - icu

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - clang-15
      - clang-15-default
      - cmake
      - curl
      - glibc-locale-en
      - icu-dev
      - krb5-dev
      - libunwind-dev
      - llvm15
      - llvm15-cmake-default
      - llvm15-dev
      - llvm15-tools
      - lttng-ust-dev
      - ncurses-dev
      - openssl-dev
      - python3
      - samurai
      - wolfi-base
      - zlib-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/dotnet/sdk.git
      tag: v${{package.version}}
      expected-commit: ceea22879533370683ed8d17de5a17e8e6df1d68
      destination: /home/build/src

  - working-directory: /home/build/src
    pipeline:
      - uses: patch
        with:
          patches: /home/build/nuget-version.patch
      - runs: |
          ./build.sh -c Release --publish \
            -- \
            /p:VersionSuffix=""
      - runs: |
          mkdir -p "${{targets.destdir}}"/usr/share/dotnet
          for i in sdk sdk-manifests templates; do
            mv artifacts/bin/redist/Release/dotnet/$i "${{targets.destdir}}"/usr/share/dotnet/
          done

subpackages:
  - name: dotnet-8-sdk-default
    dependencies:
      runtime:
        - dotnet-8-sdk
        - dotnet-8-runtime-default
        - aspnet-8-runtime-default
      provides:
        - dotnet-sdk=8
        - dotnet-8-sdk=${{package.full-version}}

update:
  enabled: true
  github:
    identifier: dotnet/sdk
    strip-prefix: v
    use-tag: false
    tag-filter: "v8"

test:
  environment:
    contents:
      packages:
        - dotnet-8
  pipeline:
    - name: Basic .NET command test
      runs: |
        dotnet --info
    - name: Compile and run a simple .NET application
      runs: |
        cat <<'EOF' > HelloWorld.cs
        using System;

        class Program
        {
            static void Main()
            {
                Console.WriteLine("Hello, World!");
            }
        }
        EOF
        dotnet new console -o HelloWorldApp --force
        mv HelloWorld.cs HelloWorldApp/Program.cs
        dotnet run --project HelloWorldApp
    - name: Compile and run a .NET application with arguments
      runs: |
        cat <<'EOF' > ArgumentEcho.cs
        using System;

        class Program
        {
            static void Main(string[] args)
            {
                Console.WriteLine("Arguments: " + String.Join(", ", args));
            }
        }
        EOF
        dotnet new console -o ArgumentEchoApp --force
        mv ArgumentEcho.cs ArgumentEchoApp/Program.cs
        dotnet run --project ArgumentEchoApp -- arg1 arg2 arg3
