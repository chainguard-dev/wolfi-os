package:
  name: go-fips-1.22
  version: 1.22.1
  epoch: 1
  description: "the Go programming language"
  copyright:
    - license: BSD-3-Clause
  dependencies:
    provides:
      - go-fips=${{package.full-version}}
    runtime:
      - '!go-1.22'
      - bash
      - binutils-gold # Needed for cgo linking due to upstream issue #15696 which forces use of the gold linker.
      - build-base

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      # We always use the equivalent non-FIPS branch of Go to build this.
      - go~1.22
      - openssl-dev

# transform melange version to contain "+" rather than third "." so we can use a var in the fetch URL
var-transforms:
  - from: ${{package.version}}
    match: \_
    replace: ''
    to: mangled-package-version

pipeline:
  - uses: fetch
    with:
      uri: https://go.dev/dl/go${{vars.mangled-package-version}}.src.tar.gz
      expected-sha256: 79c9b91d7f109515a25fc3ecdaad125d67e6bdb54f6d4d98580f46799caea321
      strip-components: 0

  # patches directly from openssl-fips/patches
  - working-directory: /home/build/go
    pipeline:
      - uses: patch
        with:
          patches: /home/build/golang-fips/000-initial-setup.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/001-initial-openssl-for-fips.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/002-strict-fips-runtime-detection.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/003-init-openssl-v2-backend.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/004-fixes.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/005-fixes-2.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/006-fixes-3.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/007-fixes-4.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/008-fixes-5.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/009-fixes-6.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/010-fixes-7.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/011-122-fixes.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/012-fixes.patch
      - uses: patch
        with:
          patches: /home/build/golang-fips/013-fixes.patch

  # now the extra patches
  - working-directory: /home/build/go
    pipeline:
      - uses: patch
        with:
          patches: /home/build/extra/0001-openssl-fips-unconditionally-use-openssl-backend.patch
      - uses: patch
        with:
          patches: /home/build/extra/0002-boring-always-enable-access-to-boring.Enabled-functi.patch

  - runs: |
      cd go/src
      ./make.bash -v

  - runs: |
      cd go

      mkdir -p "${{targets.destdir}}"/usr/bin "${{targets.destdir}}"/usr/lib/go/bin "${{targets.destdir}}"/usr/share/doc/go

      for bin in go gofmt; do
        install -Dm755 bin/$bin "${{targets.destdir}}"/usr/lib/go/bin/$bin
        ln -s /usr/lib/go/bin/$bin "${{targets.destdir}}"/usr/bin/
      done

      cp -a pkg lib "${{targets.destdir}}"/usr/lib/go/
      cp -r doc misc "${{targets.destdir}}"/usr/share/doc/go
      cp -a src "${{targets.destdir}}"/usr/lib/go/
      cp -p go.env "${{targets.destdir}}"/usr/lib/go/go.env

      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/obj
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/bootstrap
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/api
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/*/cmd
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/api
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/go_bootstrap
      rm -rf "${{targets.destdir}}"/usr/lib/go/src/cmd/dist/dist

      # Remove tests from /usr/lib/go/src, not needed at runtime
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*_test.go" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type d -a -name "testdata" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.rc" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.bat" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.pem" \) \
        -exec rm -rf \{\} \+

  - uses: strip

subpackages:
  - name: "${{package.name}}-doc"
    description: "go documentation"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share
          mv "${{targets.destdir}}"/usr/share/doc "${{targets.subpkgdir}}"/usr/share/

update:
  enabled: true
  shared: true
  github:
    identifier: golang/go
    strip-prefix: go
    tag-filter: go1.22
    use-tag: true

test:
  pipeline:
    - runs: |
        export HOME=$PWD
        export GOPATH=$PWD
        go version
        cat <<EOF >> /tmp/main.go
        package main

        import "fmt"

        func main() {
                fmt.Println("Hello Wolfi")
        }
        EOF
        go run /tmp/main.go
    - name: "sha256 test"
      runs: |
        export HOME=$PWD
        export GOPATH=$PWD

        mkdir sha256
        cd sha256
        cat >sha256.go <<"EOF"
        package main

        import (
            "crypto/sha256"
            "fmt"
            "os"
        )

        func main() {
            fmt.Printf("%x\n", sha256.Sum256([]byte(os.Args[1])))
        }
        EOF

        go mod init example.com/go/sha256
        go mod tidy

        CGO_ENABLED=1 go build .

        go tool nm ./sha256 > nm.out
        if ! grep -q v2._Cfunc_go_openssl nm.out; then
            echo "built sha256 was missing v2._Cfunc_go_openssl symbol"
            cat nm.out
            exit 1
        fi

        # you can't actually run this here because you'd need the fips provider.
        #expected=e6f9203564e78f0a61c829906c1a8fe1303767d06f2b96d6185f10950baa44ae
        #found=$(./sha256 "Go Cubs Go")
        #
        #[ "$found" = "$expected" ]
