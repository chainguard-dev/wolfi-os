#nolint:git-checkout-must-use-github-updates
# Note: To produce a debug build of Chromium, pass these options to gn:
#  is_debug=true
#  is_official_build=false
#  symbol_level=2
# And remove the use of the strip pipeline below
package:
  name: chromium
  version: "132.0.6834.83"
  epoch: 1
  description: "Open souce version of Google's chrome web browser"
  copyright:
    - license: BSD-3-Clause
  resources:
    cpu: 65
    memory: 128Gi
  dependencies:
    runtime:
      - font-opensans
      - fontconfig
      - gtk-3
      - icu-data-full
      - libnss
      - mesa
      - mesa-glx
      - nss
      - systemd
      - xdg-utils

vars:
  llvm-version: "19"

environment:
  contents:
    packages:
      - alsa-lib-dev
      - at-spi2-core-dev
      - bash
      - bison
      - brotli-dev
      - build-base
      - busybox
      - bzip2-dev
      - ca-certificates-bundle
      - cairo-dev
      - clang-${{vars.llvm-version}}
      - compiler-rt-${{vars.llvm-version}}
      - crc32c-dev
      - cups-dev
      - curl
      - curl-dev
      - dav1d-dev
      - dbus-dev
      - dbus-glib-dev
      - default-jdk
      - double-conversion-dev
      - elfutils
      - elfutils-dev
      - expat-dev
      - ffmpeg-dev
      - findutils
      - flac-dev
      - flex
      - fontconfig-dev
      - freetype-dev
      - fribidi-dev
      - git
      - glib-dev
      - glibc-dev
      - gn
      - gnutar
      - gperf
      - gtk-3-dev
      - gzip
      - harfbuzz-dev
      - harfbuzz-static
      - hwdata-dev
      - hwdata-usb
      - icu-dev
      - krb5-dev
      - lcms2-dev
      - libbsd-dev
      - libcap-dev
      - libdrm-dev
      - libevent-dev
      - libffi-dev
      - libgcrypt-dev
      - libjpeg-turbo-dev
      - libnspr-dev
      - libnss-dev
      - libogg-dev
      - libpsl-dev
      - libpsl-static
      - libsecret-dev
      - libusb-dev
      - libva-dev
      - libwebp-dev
      - libxcomposite-dev
      - libxcursor-dev
      - libxdamage
      - libxdamage-dev
      - libxft-dev
      - libxi-dev
      - libxinerama-dev
      - libxkbcommon
      - libxkbcommon-dev
      - libxml2-dev
      - libxrandr-dev
      - libxshmfence-dev
      - libxslt-dev
      - libxtst
      - libxtst-dev
      - linux-headers
      - llvm-${{vars.llvm-version}}-dev
      - llvm-lld-${{vars.llvm-version}}
      - mesa-dev
      - minizip
      - nghttp2-dev
      - nodejs
      - openh264-dev
      - openssf-compiler-options
      - opus-dev
      - pango
      - pango-dev
      - pciutils
      - pciutils-dev
      - perl
      - pulseaudio-dev
      - py3-httplib2
      - py3-setuptools
      - python3
      - qt5-qtbase-dev
      - qt6-qtbase-dev
      - rust
      - rust-bindgen
      - samurai
      - scanelf
      - speex-dev
      - sqlite-dev
      - systemd-dev
      - wget
      - xcb-proto
      - xz
      - zlib-dev
      - zstd-dev
  environment:
    # Use system clang
    AR: "llvm-ar"
    CC: "clang"
    CXX: "clang++"
    NM: "llvm-nm"
    # Allow unstable features with stable rust
    RUSTC_BOOTSTRAP: 1

pipeline:
  - uses: fetch
    with:
      # === INFO === Fetch source and dependencies: takes about 11 minutes, requires 30 GB of disk
      uri: https://chromium-tarballs.distfiles.gentoo.org/chromium-${{package.version}}-linux.tar.xz
      expected-sha512: f5f1e1f620988ae5cbf042eb0acad5cc00bcf1854d3fb78574ea123dbeb8f5b065dff3fbd5f169c6acf3ed4bc7394d066b1bf6de53b8ccf1ac0432cfde8585fe

  - uses: patch
    with:
      patches: |
        bindgen.patch \
        fortify_level.patch

  - runs: |
      # === INFO === Remove binaries present in Chromium tarball
      scanelf -RA -F "%F" "$HOME" 2>/dev/null | while read -r elf; do
        echo "Removing $elf"
        rm -f "$elf"
      done

      # === INFO === Use system dependencies
      # Use USB IDs already provided by hwdata-usb
      sed 's|//third_party/usb_ids/usb.ids|/usr/share/hwdata/usb.ids|g' \
        -i services/device/public/cpp/usb/BUILD.gn

      # System libraries
      # Chromium doesn't like our ffmpeg so remove for now
      system_libs="
        brotli
        crc32c
        dav1d
        double-conversion
        flac
        fontconfig
        harfbuzz-ng
        libdrm
        libevent
        libjpeg
        libsecret
        libusb
        libwebp
        libxml
        libxslt
        openh264
        opus
        zlib
        zstd
      "

      # Remove system provided library buildscripts
      for _lib in $system_libs libjpeg_turbo unrar; do
        echo "Removing buildscripts for system provided $_lib"
        _lib="${_lib/swiftshader-/swiftshader/third_party/}"
          find . -type f -path "*third_party/$_lib/*" \
          \! -path "*third_party/$_lib/chromium/*" \
          \! -path "*third_party/$_lib/google/*" \
          \! -path './base/third_party/icu/*' \
          \! -path './third_party/libxml/*' \
          \! -path './third_party/pdfium/third_party/freetype/include/pstables.h' \
          \! -path './third_party/harfbuzz-ng/utils/hb_scoped.h' \
          \! -path './third_party/crashpad/crashpad/third_party/zlib/zlib_crashpad.h' \
          \! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
          -delete
      done

      # Update gn configuration to use system libraries
      python3 build/linux/unbundle/replace_gn_files.py --system-libraries $system_libs
      python3 third_party/libaddressinput/chromium/tools/update-strings.py

      # Allow system dependencies in "official builds"
      sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
        tools/generate_shim_headers/generate_shim_headers.py

      # === INFO === Use host tools
      ln -sv /usr/bin/java third_party/jdk/current/bin/java
      ln -sv /usr/bin/node third_party/node/linux/node-linux-x64/bin/node

      # === INFO === Generate config: takes about 30 minutes
      time gn gen $HOME/out/Default --args="
        blink_symbol_level=0
        clang_base_path=\"/usr/lib/llvm-${{vars.llvm-version}}\"
        clang_use_chrome_plugins=false
        clang_version=\"${{vars.llvm-version}}\"
        chrome_pgo_phase=0
        custom_toolchain=\"//build/toolchain/linux/unbundle:default\"
        enable_nacl=false
        enable_rust=true
        enable_widevine=true
        enable_freetype=true
        ffmpeg_branding=\"Chrome\"
        host_toolchain=\"//build/toolchain/linux/unbundle:default\"
        icu_use_data_file=false
        is_cfi=false
        is_clang=true
        is_component_build=false
        is_component_ffmpeg=true
        is_debug=false
        is_official_build=true
        link_pulseaudio=true
        moc_qt6_path=\"/usr/lib/qt6/libexec\"
        proprietary_codecs=true
        safe_browsing_use_unrar=false
        symbol_level=0
        rustc_version=\"$(rustc --version)\"
        rust_bindgen_root=\"/usr\"
        rust_sysroot_absolute=\"/usr\"
        treat_warnings_as_errors=false
        use_custom_libcxx=true
        use_lld=true
        use_pulseaudio=true
        use_qt6=true
        use_safe_libstdcxx=false
        use_sysroot=false
        use_system_freetype=true
        use_system_harfbuzz=true
        use_system_lcms2=true
        use_system_libdrm=true
        use_system_libffi=true
        use_system_libjpeg=true
        use_system_zlib=true
      "

      # === INFO === Disable compiler warnings encountered when using system provided libraries
      export CFLAGS="$CFLAGS -Wno-unknown-warning-option -Wno-builtin-macro-redefined -Wno-deprecated-declarations -Wno-shift-count-overflow -Wno-ignored-attributes"
      export CXXFLAGS="$CXXFLAGS -Wno-unknown-warning-option -Wno-builtin-macro-redefined -Wno-deprecated-declarations -Wno-invalid-constexpr"
      export CPPFLAGS="${CPPFLAGS/-Wp,-D_GLIBCXX_ASSERTIONS/} -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__="

      # === INFO === Compile: takes about 3 hours, 60 GB of disk (on a 32xXeon, 128GBxRAM, 2TBxNVME system)
      time ninja -C $HOME/out/Default chrome chromedriver.unstripped chrome_crashpad_handler chrome_sandbox

      # === INFO === Install the binaries and libraries
      cd $HOME/out/Default
      mkdir -p ${{targets.destdir}}/usr/bin ${{targets.destdir}}/usr/lib/${{package.name}}
      mv *.so* ${{targets.destdir}}/usr/lib/${{package.name}}
      mv chrome ${{targets.destdir}}/usr/lib/${{package.name}}
      mv chrome_crashpad_handler ${{targets.destdir}}/usr/lib/${{package.name}}
      mv chrome_sandbox ${{targets.destdir}}/usr/lib/${{package.name}}

      # resources
      mv snapshot_blob.bin ${{targets.destdir}}/usr/lib/${{package.name}}
      mv v8_context_snapshot.bin ${{targets.destdir}}/usr/lib/${{package.name}}
      mv xdg-mime ${{targets.destdir}}/usr/lib/${{package.name}}
      mv xdg-settings ${{targets.destdir}}/usr/lib/${{package.name}}
      mv vk_swiftshader_icd.json ${{targets.destdir}}/usr/lib/${{package.name}}
      mv *.pak ${{targets.destdir}}/usr/lib/${{package.name}}
      mv locales ${{targets.destdir}}/usr/lib/${{package.name}}

      # wrapper
      cd $HOME
      mv chromium-launcher.sh ${{targets.destdir}}/usr/bin/chromium-browser

      # links
      ln -sf /usr/lib/${{package.name}}/chrome ${{targets.destdir}}/usr/bin/chromium
      ln -sf /usr/lib/${{package.name}}/chromedriver ${{targets.destdir}}/usr/bin/chromedriver
      mkdir -p ${{targets.destdir}}/etc/chromium

  - uses: strip
    with:
      opts: -s

  # Do not strip ChromeDriver
  - working-directory: /home/out/Default
    runs: |
      mv chromedriver.unstripped ${{targets.destdir}}/usr/lib/${{package.name}}/chromedriver

subpackages:
  - name: ${{package.name}}-lang
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/lib/${{package.name}}/locales
          mv ${{targets.destdir}}/usr/lib/${{package.name}}/locales/* ${{targets.subpkgdir}}/usr/lib/${{package.name}}/locales/

          # Ensure we provide one locale in the base package
          mv ${{targets.subpkgdir}}/usr/lib/${{package.name}}/locales/en-US.pak ${{targets.destdir}}/usr/lib/${{package.name}}/locales/en-US.pak

  # https://github.com/SeleniumHQ/docker-selenium/blob/trunk/NodeChrome/Dockerfile
  - name: chromium-docker-selenium-compat
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/opt/selenium

          ln -sf /usr/lib/chromium/chromedriver ${{targets.subpkgdir}}/opt/selenium/chromedriver-${{package.version}}

          echo "chrome" > ${{targets.subpkgdir}}/opt/selenium/browser_name
          echo ${{package.version}} > ${{targets.subpkgdir}}/opt/selenium/browser_version
          echo "\"goog:chromeOptions\": {\"binary\": \"/usr/bin/chromium-browser\"}" > ${{targets.subpkgdir}}/opt/selenium/browser_binary_location

update:
  enabled: true
  release-monitor:
    identifier: 13344

test:
  environment:
    contents:
      packages:
        - chromium~${{package.full-version}}
        - grep
        - posix-libc-utils
        - libnss
        - py3-pip
        - python3
  pipeline:
    - uses: test/ldd-check
      with:
        verbose: true
        files: /usr/lib/chromium/chrome
    - runs: |
        # Make sure Chrome and ChromeDriver are at the correct path
        test -x /usr/lib/chromium/chrome
        test -x /usr/lib/chromium/chromedriver
        test -f /usr/lib/chromium/locales/en-US.pak

        # Check status with new headless mode
        chromium --no-sandbox --headless --disable-gpu --dump-dom https://www.chromestatus.com

        # Test wrapper
        CHROMIUM_USER_FLAGS="--no-sandbox --headless --disable-gpu --dump-dom" chromium-browser https://www.chromestatus.com

        # Test ChromeDriver functionality
        # Disable ChromeDriver test until py3-selenium has been packaged
        pip3 install selenium
        python3 ./test-chromedriver.py
        chromedriver --version
        chromedriver --help
        chromium --version
        chromium-browser --version
