"""
This is the test for urllib.parse to ensure that square brackets are
now disallowed in domain names.

See: https://github.com/python/cpython/commit/a7084f6075c9595ba60119ce8c62f1496f50c568
"""

import unittest


import urllib.parse


"These test cases ensure that square brackets are not valid in TLDs"
class UrlParseTestCase(unittest.TestCase):
    def test_invalid_bracketed_hosts(self):
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix.[v6a.ip]')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://[v6a.ip].suffix')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix.[v6a.ip]/')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://[v6a.ip].suffix/')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix.[v6a.ip]?')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://[v6a.ip].suffix?')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix.[::1]')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://[::1].suffix')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix.[::1]/')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://[::1].suffix/')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix.[::1]?')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://[::1].suffix?')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix.[::1]:a')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://[::1].suffix:a')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix.[::1]:a1')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://[::1].suffix:a1')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix.[::1]:1a')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://[::1].suffix:1a')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix.[::1]:')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://[::1].suffix:/')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix.[::1]:?')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://user@prefix.[v6a.ip]')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://user@[v6a.ip].suffix')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://[v6a.ip')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://v6a.ip]')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://]v6a.ip[')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://]v6a.ip')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://v6a.ip[')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix.[v6a.ip')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://v6a.ip].suffix')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix]v6a.ip[suffix')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://prefix]v6a.ip')
        self.assertRaises(ValueError, urllib.parse.urlsplit, 'scheme://v6a.ip[suffix')

    def test_splitting_bracketed_hosts(self):
        p1 = urllib.parse.urlsplit('scheme://user@[v6a.ip]:1234/path?query')
        self.assertEqual(p1.hostname, 'v6a.ip')
        self.assertEqual(p1.username, 'user')
        self.assertEqual(p1.path, '/path')
        self.assertEqual(p1.port, 1234)
        p2 = urllib.parse.urlsplit('scheme://user@[0439:23af:2309::fae7%test]/path?query')
        self.assertEqual(p2.hostname, '0439:23af:2309::fae7%test')
        self.assertEqual(p2.username, 'user')
        self.assertEqual(p2.path, '/path')
        self.assertIs(p2.port, None)


if __name__ == '__main__':
    unittest.main()
