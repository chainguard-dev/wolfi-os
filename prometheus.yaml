package:
  name: prometheus
  version: 2.50.1
  epoch: 2
  description: The Prometheus monitoring system and time series database.
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - bash
      - busybox
      - ca-certificates-bundle
      - go
      - nodejs

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 8c9b0285360a0b6288d76214a75ce3025bce4050
      repository: https://github.com/prometheus/prometheus
      tag: v${{package.version}}

  - runs: |
      GOLDFLAGS="-s -w -X github.com/prometheus/common/version.Version=${{package.version}}
        -X github.com/prometheus/common/version.Revision=WolfiLinux
        -X github.com/prometheus/common/version.Branch=master
        -X github.com/prometheus/common/version.BuildUser=$USER@$HOSTNAME
        -X github.com/prometheus/common/version.BuildDate=$(date -u "+%Y%m%d-%H:%M:%S" ${SOURCE_DATE_EPOCH:+-d @$SOURCE_DATE_EPOCH})
      "
      if [ -n "$LDFLAGS" ]; then
        # LDFLAGS (and only LDFLAGS) should be passed to -extldflags.
        GOLDFLAGS="$GOLDFLAGS -extldflags '$LDFLAGS'"
      fi

      # set -j1 to run things in the correct order in makefile
      # actual go building is still parallel
      make -j1 assets-compress

      go build \
        -trimpath \
        -mod=readonly \
        -ldflags "$GOLDFLAGS" \
        -tags netgo,builtinassets \
        ./cmd/prometheus
      go build \
        -trimpath \
        -mod=readonly \
        -ldflags "$GOLDFLAGS" \
        ./cmd/promtool

  - runs: |
      install -Dm755 prometheus "${{targets.destdir}}"/usr/bin/prometheus
      install -Dm755 promtool "${{targets.destdir}}"/usr/bin/promtool

      install -Dm644 prometheus.confd \
        "${{targets.destdir}}"/etc/conf.d/prometheus

      install -dm644 "${{targets.destdir}}"/var/lib/prometheus/data

      install -Dm644 -t "${{targets.destdir}}"/etc/prometheus \
        documentation/examples/prometheus.yml

      mkdir -p "${{targets.destdir}}"/etc/prometheus/console_libraries
      for file in console_libraries/*
      do
        install -Dm644 -t "${{targets.destdir}}"/etc/prometheus/console_libraries/ "$file"
      done

      mkdir -p "${{targets.destdir}}"/etc/prometheus/consoles
      for file in consoles/*
      do
        install -Dm644 -t "${{targets.destdir}}"/etc/prometheus/consoles/ "$file"
      done

  - uses: strip

subpackages:
  - name: ${{package.name}}-bitnami-compat
    description: "compat package with bitnami/prometheus image"
    pipeline:
      - uses: bitnami/compat
        with:
          image: prometheus
          version-path: 2/debian-12
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/opt/bitnami/prometheus/bin/
          mkdir -p ${{targets.subpkgdir}}/opt/bitnami/prometheus/conf

          chmod g+rwX ${{targets.subpkgdir}}/opt/bitnami

          cp ${{targets.destdir}}/usr/bin/prometheus ${{targets.subpkgdir}}/opt/bitnami/prometheus/bin/prometheus
          cp ${{targets.destdir}}/usr/bin/promtool ${{targets.subpkgdir}}/opt/bitnami/prometheus/bin/promtool
          cp -r ${{targets.destdir}}/etc/prometheus/* ${{targets.subpkgdir}}/opt/bitnami/prometheus/conf/
          cp -r ${{targets.destdir}}/var/lib/prometheus/data ${{targets.subpkgdir}}/opt/bitnami/prometheus/data

update:
  ignore-regex-patterns:
    - '\+stringlabels' # looks like stringlabels are still experimental, let's stick to the main version stream.
  enabled: true
  github:
    identifier: prometheus/prometheus
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - busybox
        - curl
  pipeline:
    - name: Test if Prometheus binary exists and runs
      runs: |
        prometheus --version
    - name: Test if Prometheus can successfully scrape metrics from itself
      runs: |
        TMP_CONFIG_DIR=$(mktemp -d)
        cat <<EOF > "$TMP_CONFIG_DIR/prometheus.yml"
        global:
          scrape_interval: 10s
        scrape_configs:
          - job_name: 'prometheus'
            static_configs:
              - targets: ['localhost:9090']
        EOF
        prometheus --config.file="$TMP_CONFIG_DIR/prometheus.yml" --storage.tsdb.path=/tmp/prometheus &
        PROMETHEUS_PID=$!
        sleep 10
        if ! curl -s http://localhost:9090/metrics | grep "promhttp_metric_handler_requests_total" >/dev/null; then
            echo "Prometheus did not scrape metrics."
            exit 1
        fi
        kill $PROMETHEUS_PID
        echo "Prometheus can scrape metrics."
    - name: Test if Prometheus can load and process alert rules
      runs: |
        TMP_CONFIG_DIR=$(mktemp -d)
        cat <<EOF > "$TMP_CONFIG_DIR/alert.rules.yml"
        groups:
        - name: example
          rules:
          - alert: HighErrorRate
            expr: job:request_latency_seconds:mean5m{job="myjob"} > 0.5
            for: 10m
            labels:
              severity: page
            annotations:
              summary: High request latency
        EOF
        cat <<EOF > "$TMP_CONFIG_DIR/prometheus.yml"
        global:
          scrape_interval: 10s
        rule_files:
          - "alert.rules.yml"
        scrape_configs:
          - job_name: 'prometheus'
            static_configs:
              - targets: ['localhost:9090']
        EOF
        prometheus --config.file="$TMP_CONFIG_DIR/prometheus.yml" --storage.tsdb.path=/tmp/prometheus &
        PROMETHEUS_PID=$!
        sleep 5
        if ! curl -s http://localhost:9090/api/v1/rules | grep "HighErrorRate" >/dev/null; then
            echo "Prometheus did not load alert rules."
            exit 1
        fi
        kill $PROMETHEUS_PID
        echo "Prometheus alert rules loading works."
