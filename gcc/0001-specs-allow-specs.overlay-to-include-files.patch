From 4c575a9b7ded861e8e8e54186c44108e70373994 Mon Sep 17 00:00:00 2001
From: Dimitri John Ledkov <dimitri.ledkov@surgut.co.uk>
Date: Fri, 6 Sep 2024 00:51:47 +0100
Subject: [PATCH] specs: allow specs.overlay to include files

First automatical discovery for "specs" file is performed. If found it
is loaded. It is expected to be plain, with %include_noerr commands
not allowed. If such specs file is not found, as is usual, "built-in"
specs are used which are generated on-the-fly.

Then, if user provided `-specs` arguments, they are processed to
suplemented the already loaded specs.

If one wants to provide a sort of configuration file of specs, one
either has to ask all users to pass in `-specs distro-debug.spec`
always. Or one has to perform `gcc -dumpspecs`, edit that, and place
it into "specs" location. Which is cumbersome and annoying. And also
does not allow "%include_noerr" function, and requires one needlessly
repeat all the specs, when likely one only wants to tweak some options
without rebuilding the toolchain all the time (meaning --with-specs=
configure options is not ok).

I sort of wish for --with-specs="%include_noerr(default.spec)" to be
allowed at configure time. But without that, add ability to provide
dynamic "specs.overlay", which is loaded with %include_noerr commands
allowed. Such that one can tweak "built-in" specs without dumping them
first.
---
 gcc/gcc.cc | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/gcc/gcc.cc b/gcc/gcc.cc
index ae1d80fe00a..331495beb06 100644
--- a/gcc/gcc.cc
+++ b/gcc/gcc.cc
@@ -8601,6 +8601,11 @@ driver::set_up_specs () const
 			      PREFIX_PRIORITY_LAST, 0, 1);
     }
 
+  /* Process any built-in specs overlay, allow include_noerr */
+  specs_file = find_a_file (&startfile_prefixes, "specs.overlay", R_OK, true);
+  if (specs_file != 0 && access (specs_file, R_OK) == 0)
+    read_specs (specs_file, false, false);
+
   /* Process any user specified specs in the order given on the command
      line.  */
   for (struct user_specs *uptr = user_specs_head; uptr; uptr = uptr->next)
-- 
2.43.0

