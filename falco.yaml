package:
  name: falco
  version: 0.36.1
  epoch: 2
  description: Cloud Native Runtime Security
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - abseil-cpp
      - abseil-cpp-dev
      - abseillib
      - autoconf
      - automake
      - bash
      - binutils
      - bpftool
      - build-base
      - busybox
      - c-ares
      - c-ares-dev
      - ca-certificates-bundle
      - clang-16
      - clang-16-dev
      - cmake
      - curl-dev
      - elfutils-dev
      - falco-libscap-modern-ebpf
      - gcc
      - git
      - glibc-dev
      - grpc
      - grpc-dev
      - icu
      - icu-dev
      - jq-dev
      - libbpf
      - libcurl-openssl4
      - libelf
      - libelf-static
      - libsystemd
      - libtbb-dev
      - libtool
      - libzstd1
      - linux-headers
      - llvm16
      - m4
      - make
      - openssl
      - openssl-dev
      - patch
      - perl
      - protobuf
      - protobuf-c-dev
      - protobuf-dev
      - re2
      - re2-dev
      - systemd-dev
      - yaml-cpp
      - yaml-cpp-dev
      - yaml-dev
      - zlib-dev
      - zstd
      - zstd-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/falcosecurity/falco
      tag: ${{package.version}}
      expected-commit: 9eb611609a2876a5f5a5378e0613f0ff767f0d42
      recurse-submodules: true

  - runs: |
      # Replace the find_dependency with find_package macro for newer cmake, otherwise it will fail.
      sed -i 's/find_dependency(Protobuf CONFIG)/find_package(Protobuf CONFIG)/' /usr/lib64/cmake/grpc/gRPCConfig.cmake

data:
  - name: builds
    items:
      falco: Cloud Native Runtime Security; built with the driver loader
      falco-no-driver: Cloud Native Runtime Security; built with modern eBPF support and without driver loader

subpackages:
  - range: builds
    name: ${{range.key}}
    description: ${{range.value}}
    dependencies:
      runtime:
        - falco-rules
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/etc/falco
          cp ./falco.yaml "${{targets.subpkgdir}}"/etc/falco/falco.yaml
          sed -e 's/time_format_iso_8601: false/time_format_iso_8601: true/' < "${{targets.subpkgdir}}"/etc/falco/falco.yaml

      - runs: |
          mkdir -p build
          cd build
          
          export DRIVER=On
          export MODERN_BPF=Off
          if [ "${{range.key}}" == "falco-no-driver" ]; then
            export DRIVER=Off
            export MODERN_BPF=On
          fi
          
          # BUILD_DRIVER controls building the driver loader
          # BUILD_BPF controls building the legacy eBPF driver, we always have this disabled for these builds
          # BUILD_FALCO_MODERN_BPF controls building modern eBPF support directly into falco binary
          # BUILD_LIBSCAP_MODERN_BPF controls building the libscap library; disabled since we prebuild libscap 
          # LIBSCAP_INCLUDE_DIRS path to pre-built libscap library with (support for modern eBPF if needed)

          # See https://falco.org/docs/install-operate/source/ and https://github.com/falcosecurity/libs/tree/master#build
          # for further explanation of build flags
          cmake \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_INSTALL_LIBDIR=/usr/lib \
            -DFALCO_ETC_DIR=/etc/falco \
            -DCMAKE_BUILD_TYPE=Release \
            -DMINIMAL_BUILD=On \
            -DUSE_BUNDLED_DEPS=Off \
            -DBUILD_BPF=Off \
            -DBUILD_LIBSCAP_MODERN_BPF=Off \
            -DLIBSCAP_INCLUDE_DIRS=/usr/lib/falco-libscap-modern-ebpf \
            -DBUILD_DRIVER=${DRIVER} \
            -DBUILD_FALCO_MODERN_BPF=${MODERN_BPF} \
          ..
      - runs: |
          cd build
          
          make falco
          install -Dm755 ./userspace/falco/falco "${{targets.subpkgdir}}"/usr/bin/falco
      - uses: strip

update:
  enabled: true
  github:
    identifier: falcosecurity/falco
    strip-prefix: v
