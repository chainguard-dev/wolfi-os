name: CI build action

on:
  pull_request:
    branches: ['main']
  push:
    branches:
      - gh-readonly-queue/main/**

jobs:
  changes:
    permissions:
      contents: read

    name: Determine packages to test building
    runs-on: ubuntu-latest
    outputs:
      packages: ${{steps.package-list.outputs.packages}}

    steps:
      - uses: actions/checkout@v4

      - name: Look for changed files
        id: changes
        uses: tj-actions/changed-files@716b1e13042866565e00e85fd4ec490e186c4a2f #tj-actions/changed-files@v41.0.1
        with:
          files_yaml: |
            melange:
              - ./*.yaml # Only top level files without structure
              - ./*/*/*.melange.yaml # Support recursive melange files with the new naming convention.

      - name: "Install wolfictl onto PATH"
        uses: wolfi-dev/actions/install-wolfictl@main

      # Assuming that we have a list of changed files such as `foo.yaml` and `bar.yaml`, this
      # strips the list down into `foo` and `bar`.
      - name: Build package list
        id: package-list
        run: |
          printf "packages=" >> $GITHUB_OUTPUT

          wolfictl text -t name --pipeline-dir=./pipelines/ \
              -r https://packages.wolfi.dev/bootstrap/stage3 \
              -k https://packages.wolfi.dev/bootstrap/stage3/wolfi-signing.rsa.pub > packages-list
          while read pkg; do
            for file in ${{ steps.changes.outputs.melange_all_changed_files }}; do
              # Since the file is a path, we need to strip out only the file
              # name from it.
              base_file=$(basename $file)
              base_file="${base_file%.melange.yaml}"
              base_file="${base_file%.yaml}"
              printf "base_file: $base_file"
              [ "${base_file}" = "$pkg" ] && printf "%s " ${base_file} >> $GITHUB_OUTPUT
            done
          done < packages-list

          printf "\n" >> $GITHUB_OUTPUT

  build:
    name: Test building of packages
    strategy:
      matrix:
        arch: [ "x86_64", "aarch64" ]
      fail-fast: false
    runs-on:
      group: wolfi-builder-${{ matrix.arch }}
    needs: changes

    outputs:
      packages_were_built: ${{ steps.file_check.outputs.exists }}

    permissions:
      contents: read
      pull-requests: write # so we have permission to comment on pull requests

    steps:
      - name: Free up runner disk space
        run: |
          set -x
          rm -rf /usr/share/dotnet
          rm -rf "$AGENT_TOOLSDIRECTORY"

      - uses: actions/checkout@v4

      # - name: 'Trust the github workspace'
      #   run: |
      #     # This is to avoid fatal errors about "dubious ownership" because we are
      #     # running inside of a container action with the workspace mounted in.
      #     git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: 'Generate local signing key'
        run: |
          make MELANGE="melange" local-melange.rsa

      - name: "Build Packages"
        uses: wolfi-dev/actions/ci-build-packages@add-ci-build
        id: build-packages
        with:
          arch: ${{ matrix.arch }}
          packages: ${{needs.changes.outputs.packages}}
          token: ${{ secrets.GITHUB_TOKEN }}

      - run: echo "${{ steps.build-packages.outputs.packages_were_built }}"

      # - name: Check SBOMs
      #   run: |
      #     apk add py3-ntia-conformance-checker
      #     for f in $(find packages -name '*.apk'); do
      #         echo ==== Checking SBOM for $f ====
      #         tar -Oxf $f var/lib/db/sbom/ > sbom.json
      #         echo ::group::sbom.json
      #         cat sbom.json
      #         echo ::endgroup::
      #         ntia-checker -v --file sbom.json
      #     done



  so_check:
    permissions:
      contents: read

    name: "ABI Compatibility check"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/wolfi-dev/sdk:latest@sha256:7c1012eb43ee829351f3b33eb0f150ca2d2e176545bd58a398a7427f5645d9c9
    needs: build
    if: needs.build.outputs.packages_were_built == 'true'

    steps:
      - name: 'Retrieve x86_64 packages'
        uses: actions/download-artifact@21e5c25de9cf2ee24742cd3e822327f3be6dd2a3 # v4.1.1
        with:
          name: packages-x86_64
          path: /tmp/artifacts-1/

      - name: 'Retrieve aarch64 packages'
        uses: actions/download-artifact@21e5c25de9cf2ee24742cd3e822327f3be6dd2a3 # v4.1.1
        with:
          name: packages-aarch64
          path: /tmp/artifacts-2/

      - name: 'Collect packages from all architectures into one place'
        run: |
          cd /tmp/artifacts-1

          # Put the packages into one place (if aarch64 logs exist)
          if test -f "/tmp/artifacts-2/packages"; then
            mv /tmp/artifacts-2/packages/* ./packages/
            # Merge the build log ("packages.log") files
            cat /tmp/artifacts-2/packages.log >> ./packages.log
          fi

      - name: Soname check
        run: |
          wolfictl check so-name --packages-dir /tmp/artifacts-1/packages --package-list-file /tmp/artifacts-1/packages.log

  scan:
    permissions:
      contents: read

    name: "Scan packages for CVEs"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/wolfi-dev/sdk:latest@sha256:7c1012eb43ee829351f3b33eb0f150ca2d2e176545bd58a398a7427f5645d9c9
    needs: build
    if: needs.build.outputs.packages_were_built == 'true'

    steps:
      - name: 'Retrieve x86_64 packages'
        uses: actions/download-artifact@21e5c25de9cf2ee24742cd3e822327f3be6dd2a3 # v4.1.1
        with:
          name: packages-x86_64
          path: /tmp/artifacts-1/

      - name: 'Retrieve aarch64 packages'
        uses: actions/download-artifact@21e5c25de9cf2ee24742cd3e822327f3be6dd2a3 # v4.1.1
        with:
          name: packages-aarch64
          path: /tmp/artifacts-2/

      - name: 'Collect packages from all architectures into one place'
        run: |
          cd /tmp/artifacts-1

          # Put the packages into one place (if aarch64 logs exist)
          if test -f "/tmp/artifacts-2/packages"; then
            mv /tmp/artifacts-2/packages/* ./packages/
            # Merge the build log ("packages.log") files
            cat /tmp/artifacts-2/packages.log >> ./packages.log
          fi

      - name: 'Retrieve Wolfi advisory data'
        uses: actions/checkout@v4
        with:
          repository: 'wolfi-dev/advisories'
          path: 'data/wolfi-advisories'

      - name: Scan for CVEs
        run: |
          wolfictl scan \
            --build-log \
            --advisories-repo-dir 'data/wolfi-advisories' \
            --advisory-filter 'resolved' \
            --require-zero \
            /tmp/artifacts-1 \
            2> /dev/null # The error message renders strangely on GitHub Actions, and the important information is already being sent to stdout.
