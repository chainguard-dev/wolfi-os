package:
  name: gtk-4
  version: 4.17.1
  epoch: 0
  description: The GTK+ Toolkit (v4)
  copyright:
    - license: LGPL-2.1-or-later
  scriptlets:
    post-install: |
      #!/bin/sh
      glib-compile-schemas /usr/share/glib-2.0/schemas

vars:
  gschemas: "usr/share/glib-2.0/schemas"

environment:
  contents:
    packages:
      - at-spi2-core-dev
      - autoconf
      - automake
      - build-base
      - busybox
      - ca-certificates-bundle
      - cairo-dev
      - cmake
      - cups-dev
      - dbus-dev
      - expat-dev
      - fontconfig-dev
      - fribidi-dev
      - gdk-pixbuf-dev
      - gettext-dev
      - gi-docgen
      - git
      - glib-dev
      - glib-gir
      - gobject-introspection-dev
      - graphene-dev
      - gst-plugins-bad-dev
      - gst-plugins-base-dev
      - gstreamer-dev
      - gtk-doc
      - harfbuzz-dev
      - hicolor-icon-theme
      - iso-codes-dev
      - libatk-bridge-2.0
      - libdrm-dev
      - libepoxy-dev
      - libice-dev
      - libtool
      - libx11-dev
      - libxcomposite-dev
      - libxcursor-dev
      - libxdamage-dev
      - libxext-dev
      - libxfixes-dev
      - libxft-dev
      - libxi-dev
      - libxinerama-dev
      - libxkbcommon
      - libxkbcommon-dev
      - libxrandr-dev
      - libxtst-dev
      - mesa-dev
      - meson
      - ninja
      - openssf-compiler-options
      - orc-compiler
      - orc-dev
      - pango-dev
      - py3-docutils
      - py3-gi-docgen
      - py3-packaging
      - sassc
      - shaderc
      - shared-mime-info
      - smartypants
      - spirv-headers
      # TODO: right now shaderc also inclused spirv-tools, causin a conflict need to fix that,
      # so we can use our own spirv-tools along with shaderc
      # - spirv-tools
      # - spirv-tools-dev
      - tiff-dev
      - vulkan-headers
      - vulkan-loader
      - wayland-dev
      - wayland-protocols
      - zlib-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://gitlab.gnome.org/GNOME/gtk.git
      tag: ${{package.version}}
      expected-commit: 34319cc5b284930cfe63c94d17bec52036a6846b

  - uses: meson/configure
    with:
      opts: |
        -Ddocumentation=true \
        -Dintrospection=enabled \
        -Dbroadway-backend=true \
        -Dman-pages=true \
        -Dbuild-tests=false \
        -Dbuild-testsuite=false \
        -Dbuild-examples=false \
        -Dbuild-demos=false \
        -Dwin32-backend=false \
        -Dmacos-backend=false \

  - uses: meson/compile

  - uses: meson/install

  - runs: |
      # We've had trouble with this build accidentally including pango. This should be fixed,
      # but throw in a test here in case.
      if [ -f ${{targets.destdir}}/usr/lib/libpango-1.0.so ]; then
        echo "ERROR: libpango-1.0.so found in /usr/lib. This is a bug in the build system."
        exit 1
      fi

  - uses: strip

subpackages:
  - name: ${{package.name}}-dev
    pipeline:
      - uses: split/dev
    dependencies:
      runtime:
        - shared-mime-info
        - at-spi2-core-dev
        - gdk-pixbuf-dev
        - glib-dev
        - libepoxy-dev
        - libxext-dev
        - libxi-dev
        - libxinerama-dev
        - libxkbcommon-dev
        - wayland-dev
        - shaderc
    description: ${{package.name}} dev

  - name: ${{package.name}}-doc
    pipeline:
      - uses: split/manpages
    description: ${{package.name}} manpages

  - name: ${{package.name}}-lang
    pipeline:
      - uses: split/locales
    description: ${{package.name}} locales

  - name: ${{package.name}}-compiled-gschemas
    description: Compiled gschemas for GTK 4
    dependencies:
      runtime:
        - ${{package.name}}
    pipeline:
      - runs: |
          glib-compile-schemas "${{targets.destdir}}/${{vars.gschemas}}"
          install -Dm755 "${{targets.destdir}}/${{vars.gschemas}}/gschemas.compiled" "${{targets.contextdir}}/${{vars.gschemas}}/gschemas.compiled"
          rm "${{targets.destdir}}/${{vars.gschemas}}/gschemas.compiled"

update:
  enabled: true
  ignore-regex-patterns:
    - (?i)[a-z] # Ignore tags that include any case letters
  git:

test:
  environment:
    contents:
      packages:
        - build-base
        - gcc
        - glib-dev
        - gobject-introspection-dev
        - python3
        - shared-mime-info
        - xvfb-run
        - wayland
        - dbus
        - mesa-dev
        - gtk-4-dev
        - pango-dev
        - cairo-dev
        - gdk-pixbuf-dev
        - harfbuzz-dev
        - fribidi-dev
        - libxft-dev
        - harfbuzz-dev
  pipeline:
    # AUTOGENERATED
    - runs: |
        gtk4-broadwayd --help
        gtk4-encode-symbolic-svg --help
        gtk4-launch --version
        gtk4-update-icon-cache --help
        gtk4-launch --help
    - name: "Verify library installation"
      runs: |
        ldconfig -p | grep libgtk-4.so
    - name: "Verify GSchema installation"
      runs: |
        test -d /usr/share/glib-2.0/schemas
        find /usr/share/glib-2.0/schemas -name "org.gtk.gtk4*.xml"
        glib-compile-schemas --dry-run /usr/share/glib-2.0/schemas
    - name: "Test basic C compilation and GTK4 functionality"
      runs: |
        cat > test.c << 'EOF'
        #include <gtk/gtk.h>

        static void button_clicked(GtkButton *button, gpointer data) {
          g_print("Button clicked!\n");
        }

        static void activate(GtkApplication *app, gpointer user_data) {
          // Test window creation
          GtkWidget *window = gtk_application_window_new(app);
          gtk_window_set_title(GTK_WINDOW(window), "Test Window");
          gtk_window_set_default_size(GTK_WINDOW(window), 200, 200);

          // Test box layout
          GtkWidget *box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 10);
          gtk_widget_set_margin_start(box, 10);
          gtk_widget_set_margin_end(box, 10);
          gtk_widget_set_margin_top(box, 10);
          gtk_widget_set_margin_bottom(box, 10);

          // Test label widget
          GtkWidget *label = gtk_label_new("Hello GTK4!");
          gtk_box_append(GTK_BOX(box), label);

          // Test button widget
          GtkWidget *button = gtk_button_new_with_label("Click Me");
          g_signal_connect(button, "clicked", G_CALLBACK(button_clicked), NULL);
          gtk_box_append(GTK_BOX(box), button);

          // Test entry widget
          GtkWidget *entry = gtk_entry_new();
          gtk_entry_set_placeholder_text(GTK_ENTRY(entry), "Enter text here");
          gtk_box_append(GTK_BOX(box), entry);

          // Test toggle button
          GtkWidget *toggle = gtk_toggle_button_new_with_label("Toggle Me");
          gtk_box_append(GTK_BOX(box), toggle);

          // Test progress bar
          GtkWidget *progress = gtk_progress_bar_new();
          gtk_progress_bar_set_fraction(GTK_PROGRESS_BAR(progress), 0.7);
          gtk_box_append(GTK_BOX(box), progress);

          // Set box as the window's child
          gtk_window_set_child(GTK_WINDOW(window), box);

          // Show the window
          gtk_window_present(GTK_WINDOW(window));
        }

        int main(int argc, char *argv[]) {
          GtkApplication *app;
          int status;

          app = gtk_application_new("org.gtk.example", G_APPLICATION_DEFAULT_FLAGS);
          g_signal_connect(app, "activate", G_CALLBACK(activate), NULL);
          status = g_application_run(G_APPLICATION(app), argc, argv);
          g_object_unref(app);

          return status;
        }
        EOF
        # Compile the test program
        gcc $(pkg-config --cflags gtk4) test.c $(pkg-config --libs gtk4) -o test-gtk

        # If compilation succeeds, the test passes
        test -x test-gtk
