From ed1dac0a0a4bd86b2ea50bbb1dbea3b2ff6a05f8 Mon Sep 17 00:00:00 2001
From: Ariadne Conill <ariadne@dereferenced.org>
Date: Mon, 18 Sep 2023 13:13:49 -0700
Subject: [PATCH 3/5] openssl-fips: unconditionally use openssl backend

Signed-off-by: Ariadne Conill <ariadne@dereferenced.org>
---
 .../openssl-fips/openssl/openssl.go           | 22 +++----------------
 1 file changed, 3 insertions(+), 19 deletions(-)

diff --git a/src/vendor/github.com/golang-fips/openssl-fips/openssl/openssl.go b/src/vendor/github.com/golang-fips/openssl-fips/openssl/openssl.go
index e93b042e5e..6da12da6b2 100644
--- a/src/vendor/github.com/golang-fips/openssl-fips/openssl/openssl.go
+++ b/src/vendor/github.com/golang-fips/openssl-fips/openssl/openssl.go
@@ -72,11 +72,8 @@ func init() {
 	// Initialize the OpenSSL library.
 	C._goboringcrypto_OPENSSL_setup()
 
-	// Check to see if the system is running in FIPS mode, if so
-	// enable "boring" mode to call into OpenSSL for FIPS compliance.
-	if fipsModeEnabled() {
-		enableBoringFIPSMode()
-	}
+	// Switch to OpenSSL crypto backend.
+	enableBoringFIPSMode()
 }
 
 func openSSLVersion() uint64 {
@@ -96,21 +93,8 @@ func enableBoringFIPSMode() {
 }
 
 func fipsModeEnabled() bool {
-	// Due to the way providers work in openssl 3, the FIPS methods are not
-	// necessarily going to be available for us to load based on the GOLANG_FIPS
-	// environment variable alone. For now, we must rely on the config to tell
-	// us if the provider is configured and active.
 	fipsConfigured := C._goboringcrypto_FIPS_mode() == fipsOn
-	openSSLVersion := openSSLVersion()
-	if openSSLVersion >= OPENSSL_VERSION_3_0_0 {
-		if !fipsConfigured && os.Getenv("GOLANG_FIPS") == "1" {
-			panic("GOLANG_FIPS=1 specified but OpenSSL FIPS provider is not configured")
-		}
-		return fipsConfigured
-
-	} else {
-		return os.Getenv("GOLANG_FIPS") == "1" || fipsConfigured
-	}
+	return fipsConfigured
 }
 
 var randstub bool
-- 
2.39.2 (Apple Git-143)

