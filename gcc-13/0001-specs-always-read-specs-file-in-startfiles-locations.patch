From 280db3c20e6b6a2c54488f76963998386e45d2c3 Mon Sep 17 00:00:00 2001
From: Dimitri John Ledkov <dimitri.ledkov@surgut.co.uk>
Date: Fri, 6 Sep 2024 00:51:47 +0100
Subject: [PATCH] specs: always read "specs" file in startfiles locations.

First automatical discovery for "specs" file is performed. If found it
is loaded. It is expected to be plain, with %include_noerr commands
not allowed. If such specs file is not found, as is usual, "built-in"
specs are used which are generated on-the-fly.

Then, if user provided `-specs` arguments, they are processed to
suplemented the already loaded specs.

If one wants to provide a sort of configuration file of specs, one
either has to ask all users to pass in `-specs distro-debug.spec`
always. Or one has to perform `gcc -dumpspecs`, edit that, and place
it into "specs" location. Which is cumbersome and annoying. And also
does not allow "%include_noerr" function, and requires one needlessly
repeat all the specs, when likely one only wants to tweak some options
without rebuilding the toolchain all the time (meaning --with-specs=
configure options is not ok).

Modify default specs reading to match documentation: specifically
always load them, and enable inclue commands for them.
---
 gcc/gcc.cc | 23 +++++++++++++++++------
 1 file changed, 17 insertions(+), 6 deletions(-)

diff --git a/gcc/gcc.cc b/gcc/gcc.cc
index ae1d80fe00a..d6e61fb8018 100644
--- a/gcc/gcc.cc
+++ b/gcc/gcc.cc
@@ -8464,12 +8464,18 @@ driver::set_up_specs () const
 			   accel_dir_suffix, dir_separator_str, NULL);
   just_machine_suffix = concat (spec_machine, dir_separator_str, NULL);
 
+  /* Always init built-in specs, as all followups can then
+     append/remove/rename. This also makes the existing Spec documentation true
+     for both command-line -specs provided files, and those added to the
+     <startfiles>/specs location */
+  init_spec ();
+
   specs_file = find_a_file (&startfile_prefixes, "specs", R_OK, true);
-  /* Read the specs file unless it is a default one.  */
-  if (specs_file != 0 && strcmp (specs_file, "specs"))
-    read_specs (specs_file, true, false);
-  else
-    init_spec ();
+
+  /* Read the specs file, these days empty, thus allow #include_noerr
+     commands */
+  if (specs_file != 0)
+    read_specs (specs_file, false, false);
 
 #ifdef ACCEL_COMPILER
   spec_machine_suffix = machine_suffix;
@@ -8485,7 +8491,7 @@ driver::set_up_specs () const
   strcat (specs_file, spec_machine_suffix);
   strcat (specs_file, "specs");
   if (access (specs_file, R_OK) == 0)
-    read_specs (specs_file, true, false);
+    read_specs (specs_file, false, false);
 
   /* Process any configure-time defaults specified for the command line
      options, via OPTION_DEFAULT_SPECS.  */
@@ -8601,6 +8607,11 @@ driver::set_up_specs () const
 			      PREFIX_PRIORITY_LAST, 0, 1);
     }
 
+  /* Process any built-in specs overlay, allow include_noerr */
+  specs_file = find_a_file (&startfile_prefixes, "specs.overlay", R_OK, true);
+  if (specs_file != 0 && access (specs_file, R_OK) == 0)
+    read_specs (specs_file, false, false);
+
   /* Process any user specified specs in the order given on the command
      line.  */
   for (struct user_specs *uptr = user_specs_head; uptr; uptr = uptr->next)
-- 
2.43.0

