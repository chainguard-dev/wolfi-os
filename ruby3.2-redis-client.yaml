# Generated from https://github.com/redis-rb/redis-client
package:
  name: ruby3.2-redis-client
  version: "0.23.1"
  epoch: 0
  description: Simple low-level client for Redis 6+
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - ruby${{vars.rubyMM}}-connection_pool

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      expected-commit: fa23f9aeb651a24460d6923a13071daf695fc94a
      repository: https://github.com/redis-rb/redis-client
      tag: v${{package.version}}

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: redis-client

update:
  enabled: true
  github:
    identifier: redis-rb/redis-client
    strip-prefix: v
    use-tag: true

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM

test:
  environment:
    contents:
      packages:
        - ruby${{vars.rubyMM}}-connection_pool
  pipeline:
    - name: Basic require test
      runs: ruby -e "require 'redis-client'; puts 'Redis client loaded successfully!'"
    - name: Test client initialization and configuration
      runs: |
        ruby <<-EOF
        require 'redis-client'
        require 'connection_pool'

        # Test client initialization
        begin
          config = RedisClient.config(
            host: "localhost",
            port: 6379,
            timeout: 0.5
          )
          puts "Client configuration successful"
        rescue => e
          raise "Failed to create client configuration: #{e.message}"
        end

        # Test URL parsing
        begin
          config = RedisClient.config(url: "redis://localhost:6379/0")
          raise "Invalid URL parsing" unless config.host == "localhost" && config.port == 6379
          puts "URL parsing successful"
        rescue => e
          raise "URL parsing failed: #{e.message}"
        end

        # Test connection pool integration
        begin
          pool = ConnectionPool.new(size: 2) do
            RedisClient.new(
              host: "localhost",
              port: 6379,
              timeout: 1,
              reconnect_attempts: 0
            )
          end
          puts "Connection pool creation successful"
        rescue => e
          raise "Connection pool creation failed: #{e.message}"
        end

        puts "All basic redis-client tests passed!"
        EOF
    - name: Test command building
      runs: |
        ruby <<-EOF
        require 'redis-client'

        # Test command building
        begin
          client = RedisClient.new(host: "localhost", port: 6379)
          command = ["SET", "key", "value"]
          raise "Invalid command format" unless command.is_a?(Array)
          puts "Command building successful"
        rescue => e
          raise "Command building failed: #{e.message}"
        end

        # Test protocol configuration
        begin
          config = RedisClient.config(
            host: "localhost",
            port: 6379,
            timeout: 0.5
          )
          puts "Protocol configuration successful"
        rescue => e
          raise "Protocol testing failed: #{e.message}"
        end

        puts "All redis-client protocol tests passed!"
        EOF
